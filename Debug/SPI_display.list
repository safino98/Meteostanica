
SPI_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fc4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  0800214c  0800214c  0001214c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002474  08002474  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08002474  08002474  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002474  08002474  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002474  08002474  00012474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002478  08002478  00012478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  0800247c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000008  08002484  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08002484  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000556b  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000189f  00000000  00000000  000255a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000728  00000000  00000000  00026e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000630  00000000  00000000  00027570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003a00  00000000  00000000  00027ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006fa8  00000000  00000000  0002b5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00075c09  00000000  00000000  00032548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a8151  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b00  00000000  00000000  000a81a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002134 	.word	0x08002134

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08002134 	.word	0x08002134

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80001d8:	b480      	push	{r7}
 80001da:	b089      	sub	sp, #36	; 0x24
 80001dc:	af00      	add	r7, sp, #0
 80001de:	60f8      	str	r0, [r7, #12]
 80001e0:	60b9      	str	r1, [r7, #8]
 80001e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	681a      	ldr	r2, [r3, #0]
 80001e8:	68bb      	ldr	r3, [r7, #8]
 80001ea:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80001ec:	697b      	ldr	r3, [r7, #20]
 80001ee:	fa93 f3a3 	rbit	r3, r3
 80001f2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80001f4:	693b      	ldr	r3, [r7, #16]
 80001f6:	fab3 f383 	clz	r3, r3
 80001fa:	005b      	lsls	r3, r3, #1
 80001fc:	2103      	movs	r1, #3
 80001fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000202:	43db      	mvns	r3, r3
 8000204:	401a      	ands	r2, r3
 8000206:	68bb      	ldr	r3, [r7, #8]
 8000208:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800020a:	69fb      	ldr	r3, [r7, #28]
 800020c:	fa93 f3a3 	rbit	r3, r3
 8000210:	61bb      	str	r3, [r7, #24]
  return(result);
 8000212:	69bb      	ldr	r3, [r7, #24]
 8000214:	fab3 f383 	clz	r3, r3
 8000218:	005b      	lsls	r3, r3, #1
 800021a:	6879      	ldr	r1, [r7, #4]
 800021c:	fa01 f303 	lsl.w	r3, r1, r3
 8000220:	431a      	orrs	r2, r3
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	601a      	str	r2, [r3, #0]
}
 8000226:	bf00      	nop
 8000228:	3724      	adds	r7, #36	; 0x24
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr

08000232 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000232:	b480      	push	{r7}
 8000234:	b085      	sub	sp, #20
 8000236:	af00      	add	r7, sp, #0
 8000238:	60f8      	str	r0, [r7, #12]
 800023a:	60b9      	str	r1, [r7, #8]
 800023c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	685a      	ldr	r2, [r3, #4]
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	43db      	mvns	r3, r3
 8000246:	401a      	ands	r2, r3
 8000248:	68bb      	ldr	r3, [r7, #8]
 800024a:	6879      	ldr	r1, [r7, #4]
 800024c:	fb01 f303 	mul.w	r3, r1, r3
 8000250:	431a      	orrs	r2, r3
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	605a      	str	r2, [r3, #4]
}
 8000256:	bf00      	nop
 8000258:	3714      	adds	r7, #20
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr

08000262 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000262:	b480      	push	{r7}
 8000264:	b089      	sub	sp, #36	; 0x24
 8000266:	af00      	add	r7, sp, #0
 8000268:	60f8      	str	r0, [r7, #12]
 800026a:	60b9      	str	r1, [r7, #8]
 800026c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	689a      	ldr	r2, [r3, #8]
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000276:	697b      	ldr	r3, [r7, #20]
 8000278:	fa93 f3a3 	rbit	r3, r3
 800027c:	613b      	str	r3, [r7, #16]
  return(result);
 800027e:	693b      	ldr	r3, [r7, #16]
 8000280:	fab3 f383 	clz	r3, r3
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	2103      	movs	r1, #3
 8000288:	fa01 f303 	lsl.w	r3, r1, r3
 800028c:	43db      	mvns	r3, r3
 800028e:	401a      	ands	r2, r3
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000294:	69fb      	ldr	r3, [r7, #28]
 8000296:	fa93 f3a3 	rbit	r3, r3
 800029a:	61bb      	str	r3, [r7, #24]
  return(result);
 800029c:	69bb      	ldr	r3, [r7, #24]
 800029e:	fab3 f383 	clz	r3, r3
 80002a2:	005b      	lsls	r3, r3, #1
 80002a4:	6879      	ldr	r1, [r7, #4]
 80002a6:	fa01 f303 	lsl.w	r3, r1, r3
 80002aa:	431a      	orrs	r2, r3
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80002b0:	bf00      	nop
 80002b2:	3724      	adds	r7, #36	; 0x24
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr

080002bc <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80002bc:	b480      	push	{r7}
 80002be:	b089      	sub	sp, #36	; 0x24
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	60b9      	str	r1, [r7, #8]
 80002c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	68da      	ldr	r2, [r3, #12]
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	fa93 f3a3 	rbit	r3, r3
 80002d6:	613b      	str	r3, [r7, #16]
  return(result);
 80002d8:	693b      	ldr	r3, [r7, #16]
 80002da:	fab3 f383 	clz	r3, r3
 80002de:	005b      	lsls	r3, r3, #1
 80002e0:	2103      	movs	r1, #3
 80002e2:	fa01 f303 	lsl.w	r3, r1, r3
 80002e6:	43db      	mvns	r3, r3
 80002e8:	401a      	ands	r2, r3
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002ee:	69fb      	ldr	r3, [r7, #28]
 80002f0:	fa93 f3a3 	rbit	r3, r3
 80002f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80002f6:	69bb      	ldr	r3, [r7, #24]
 80002f8:	fab3 f383 	clz	r3, r3
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	6879      	ldr	r1, [r7, #4]
 8000300:	fa01 f303 	lsl.w	r3, r1, r3
 8000304:	431a      	orrs	r2, r3
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	60da      	str	r2, [r3, #12]
}
 800030a:	bf00      	nop
 800030c:	3724      	adds	r7, #36	; 0x24
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr

08000316 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000316:	b480      	push	{r7}
 8000318:	b089      	sub	sp, #36	; 0x24
 800031a:	af00      	add	r7, sp, #0
 800031c:	60f8      	str	r0, [r7, #12]
 800031e:	60b9      	str	r1, [r7, #8]
 8000320:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	6a1a      	ldr	r2, [r3, #32]
 8000326:	68bb      	ldr	r3, [r7, #8]
 8000328:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	fa93 f3a3 	rbit	r3, r3
 8000330:	613b      	str	r3, [r7, #16]
  return(result);
 8000332:	693b      	ldr	r3, [r7, #16]
 8000334:	fab3 f383 	clz	r3, r3
 8000338:	009b      	lsls	r3, r3, #2
 800033a:	210f      	movs	r1, #15
 800033c:	fa01 f303 	lsl.w	r3, r1, r3
 8000340:	43db      	mvns	r3, r3
 8000342:	401a      	ands	r2, r3
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000348:	69fb      	ldr	r3, [r7, #28]
 800034a:	fa93 f3a3 	rbit	r3, r3
 800034e:	61bb      	str	r3, [r7, #24]
  return(result);
 8000350:	69bb      	ldr	r3, [r7, #24]
 8000352:	fab3 f383 	clz	r3, r3
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	6879      	ldr	r1, [r7, #4]
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	431a      	orrs	r2, r3
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000364:	bf00      	nop
 8000366:	3724      	adds	r7, #36	; 0x24
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr

08000370 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000370:	b480      	push	{r7}
 8000372:	b089      	sub	sp, #36	; 0x24
 8000374:	af00      	add	r7, sp, #0
 8000376:	60f8      	str	r0, [r7, #12]
 8000378:	60b9      	str	r1, [r7, #8]
 800037a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	0a1b      	lsrs	r3, r3, #8
 8000384:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000386:	697b      	ldr	r3, [r7, #20]
 8000388:	fa93 f3a3 	rbit	r3, r3
 800038c:	613b      	str	r3, [r7, #16]
  return(result);
 800038e:	693b      	ldr	r3, [r7, #16]
 8000390:	fab3 f383 	clz	r3, r3
 8000394:	009b      	lsls	r3, r3, #2
 8000396:	210f      	movs	r1, #15
 8000398:	fa01 f303 	lsl.w	r3, r1, r3
 800039c:	43db      	mvns	r3, r3
 800039e:	401a      	ands	r2, r3
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	0a1b      	lsrs	r3, r3, #8
 80003a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003a6:	69fb      	ldr	r3, [r7, #28]
 80003a8:	fa93 f3a3 	rbit	r3, r3
 80003ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80003ae:	69bb      	ldr	r3, [r7, #24]
 80003b0:	fab3 f383 	clz	r3, r3
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	6879      	ldr	r1, [r7, #4]
 80003b8:	fa01 f303 	lsl.w	r3, r1, r3
 80003bc:	431a      	orrs	r2, r3
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80003c2:	bf00      	nop
 80003c4:	3724      	adds	r7, #36	; 0x24
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr

080003ce <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80003ce:	b580      	push	{r7, lr}
 80003d0:	b088      	sub	sp, #32
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
 80003d6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80003d8:	2300      	movs	r3, #0
 80003da:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80003dc:	2300      	movs	r3, #0
 80003de:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	fa93 f3a3 	rbit	r3, r3
 80003ec:	613b      	str	r3, [r7, #16]
  return(result);
 80003ee:	693b      	ldr	r3, [r7, #16]
 80003f0:	fab3 f383 	clz	r3, r3
 80003f4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80003f6:	e048      	b.n	800048a <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	2101      	movs	r1, #1
 80003fe:	69fb      	ldr	r3, [r7, #28]
 8000400:	fa01 f303 	lsl.w	r3, r1, r3
 8000404:	4013      	ands	r3, r2
 8000406:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000408:	69bb      	ldr	r3, [r7, #24]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d03a      	beq.n	8000484 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	461a      	mov	r2, r3
 8000414:	69b9      	ldr	r1, [r7, #24]
 8000416:	6878      	ldr	r0, [r7, #4]
 8000418:	f7ff fede 	bl	80001d8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	2b01      	cmp	r3, #1
 8000422:	d003      	beq.n	800042c <LL_GPIO_Init+0x5e>
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	2b02      	cmp	r3, #2
 800042a:	d106      	bne.n	800043a <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	689b      	ldr	r3, [r3, #8]
 8000430:	461a      	mov	r2, r3
 8000432:	69b9      	ldr	r1, [r7, #24]
 8000434:	6878      	ldr	r0, [r7, #4]
 8000436:	f7ff ff14 	bl	8000262 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	691b      	ldr	r3, [r3, #16]
 800043e:	461a      	mov	r2, r3
 8000440:	69b9      	ldr	r1, [r7, #24]
 8000442:	6878      	ldr	r0, [r7, #4]
 8000444:	f7ff ff3a 	bl	80002bc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	2b02      	cmp	r3, #2
 800044e:	d119      	bne.n	8000484 <LL_GPIO_Init+0xb6>
 8000450:	69bb      	ldr	r3, [r7, #24]
 8000452:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	fa93 f3a3 	rbit	r3, r3
 800045a:	60bb      	str	r3, [r7, #8]
  return(result);
 800045c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800045e:	fab3 f383 	clz	r3, r3
 8000462:	2b07      	cmp	r3, #7
 8000464:	d807      	bhi.n	8000476 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	461a      	mov	r2, r3
 800046c:	69b9      	ldr	r1, [r7, #24]
 800046e:	6878      	ldr	r0, [r7, #4]
 8000470:	f7ff ff51 	bl	8000316 <LL_GPIO_SetAFPin_0_7>
 8000474:	e006      	b.n	8000484 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	461a      	mov	r2, r3
 800047c:	69b9      	ldr	r1, [r7, #24]
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f7ff ff76 	bl	8000370 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000484:	69fb      	ldr	r3, [r7, #28]
 8000486:	3301      	adds	r3, #1
 8000488:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	69fb      	ldr	r3, [r7, #28]
 8000490:	fa22 f303 	lsr.w	r3, r2, r3
 8000494:	2b00      	cmp	r3, #0
 8000496:	d1af      	bne.n	80003f8 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d003      	beq.n	80004a8 <LL_GPIO_Init+0xda>
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	685b      	ldr	r3, [r3, #4]
 80004a4:	2b02      	cmp	r3, #2
 80004a6:	d107      	bne.n	80004b8 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	6819      	ldr	r1, [r3, #0]
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	461a      	mov	r2, r3
 80004b2:	6878      	ldr	r0, [r7, #4]
 80004b4:	f7ff febd 	bl	8000232 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80004b8:	2300      	movs	r3, #0
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	3720      	adds	r7, #32
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80004c2:	b480      	push	{r7}
 80004c4:	b083      	sub	sp, #12
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f043 0201 	orr.w	r2, r3, #1
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	601a      	str	r2, [r3, #0]
}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr

080004e2 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 80004e2:	b480      	push	{r7}
 80004e4:	b083      	sub	sp, #12
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f023 0201 	bic.w	r2, r3, #1
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	601a      	str	r2, [r3, #0]
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 8000502:	b480      	push	{r7}
 8000504:	b085      	sub	sp, #20
 8000506:	af00      	add	r7, sp, #0
 8000508:	60f8      	str	r0, [r7, #12]
 800050a:	60b9      	str	r1, [r7, #8]
 800050c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	0219      	lsls	r1, r3, #8
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	430b      	orrs	r3, r1
 800051e:	431a      	orrs	r2, r3
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	601a      	str	r2, [r3, #0]
}
 8000524:	bf00      	nop
 8000526:	3714      	adds	r7, #20
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000544:	f023 0307 	bic.w	r3, r3, #7
 8000548:	68b9      	ldr	r1, [r7, #8]
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	430a      	orrs	r2, r1
 800054e:	431a      	orrs	r2, r3
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	609a      	str	r2, [r3, #8]
}
 8000554:	bf00      	nop
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	689b      	ldr	r3, [r3, #8]
 800056c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	609a      	str	r2, [r3, #8]
}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	609a      	str	r2, [r3, #8]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	683a      	ldr	r2, [r7, #0]
 80005ae:	611a      	str	r2, [r3, #16]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	431a      	orrs	r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	601a      	str	r2, [r3, #0]
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80005e2:	b480      	push	{r7}
 80005e4:	b083      	sub	sp, #12
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
 80005ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	431a      	orrs	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	605a      	str	r2, [r3, #4]
}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f7ff ff65 	bl	80004e2 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	6899      	ldr	r1, [r3, #8]
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	461a      	mov	r2, r3
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f7ff ff6d 	bl	8000502 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	4619      	mov	r1, r3
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f7ff ffb6 	bl	80005a0 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f7ff ff44 	bl	80004c2 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f7ff ffa0 	bl	8000580 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	6919      	ldr	r1, [r3, #16]
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	461a      	mov	r2, r3
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f7ff ff70 	bl	8000530 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	691b      	ldr	r3, [r3, #16]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d002      	beq.n	800065e <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f7ff ff81 	bl	8000560 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4619      	mov	r1, r3
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f7ff ffa9 	bl	80005bc <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	4619      	mov	r1, r3
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f7ff ffb6 	bl	80005e2 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8000676:	2300      	movs	r3, #0
}
 8000678:	4618      	mov	r0, r3
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000690:	2b40      	cmp	r3, #64	; 0x40
 8000692:	bf0c      	ite	eq
 8000694:	2301      	moveq	r3, #1
 8000696:	2300      	movne	r3, #0
 8000698:	b2db      	uxtb	r3, r3
}
 800069a:	4618      	mov	r0, r3
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 80006a6:	b480      	push	{r7}
 80006a8:	b083      	sub	sp, #12
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
 80006ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	461a      	mov	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	611a      	str	r2, [r3, #16]
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b084      	sub	sp, #16
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
 80006ce:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80006d0:	2301      	movs	r3, #1
 80006d2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff ffd3 	bl	8000680 <LL_SPI_IsEnabled>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d13b      	bne.n	8000758 <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80006e8:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80006ec:	683a      	ldr	r2, [r7, #0]
 80006ee:	6811      	ldr	r1, [r2, #0]
 80006f0:	683a      	ldr	r2, [r7, #0]
 80006f2:	6852      	ldr	r2, [r2, #4]
 80006f4:	4311      	orrs	r1, r2
 80006f6:	683a      	ldr	r2, [r7, #0]
 80006f8:	68d2      	ldr	r2, [r2, #12]
 80006fa:	4311      	orrs	r1, r2
 80006fc:	683a      	ldr	r2, [r7, #0]
 80006fe:	6912      	ldr	r2, [r2, #16]
 8000700:	4311      	orrs	r1, r2
 8000702:	683a      	ldr	r2, [r7, #0]
 8000704:	6952      	ldr	r2, [r2, #20]
 8000706:	4311      	orrs	r1, r2
 8000708:	683a      	ldr	r2, [r7, #0]
 800070a:	6992      	ldr	r2, [r2, #24]
 800070c:	4311      	orrs	r1, r2
 800070e:	683a      	ldr	r2, [r7, #0]
 8000710:	69d2      	ldr	r2, [r2, #28]
 8000712:	4311      	orrs	r1, r2
 8000714:	683a      	ldr	r2, [r7, #0]
 8000716:	6a12      	ldr	r2, [r2, #32]
 8000718:	430a      	orrs	r2, r1
 800071a:	431a      	orrs	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000728:	f023 0304 	bic.w	r3, r3, #4
 800072c:	683a      	ldr	r2, [r7, #0]
 800072e:	6891      	ldr	r1, [r2, #8]
 8000730:	683a      	ldr	r2, [r7, #0]
 8000732:	6952      	ldr	r2, [r2, #20]
 8000734:	0c12      	lsrs	r2, r2, #16
 8000736:	430a      	orrs	r2, r1
 8000738:	431a      	orrs	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	6a1b      	ldr	r3, [r3, #32]
 8000742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000746:	d105      	bne.n	8000754 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074c:	4619      	mov	r1, r3
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f7ff ffa9 	bl	80006a6 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8000754:	2300      	movs	r3, #0
 8000756:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 8000758:	7bfb      	ldrb	r3, [r7, #15]
}
 800075a:	4618      	mov	r0, r3
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	fbb2 f3f3 	udiv	r3, r2, r3
 8000776:	4a07      	ldr	r2, [pc, #28]	; (8000794 <LL_InitTick+0x30>)
 8000778:	3b01      	subs	r3, #1
 800077a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <LL_InitTick+0x30>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <LL_InitTick+0x30>)
 8000784:	2205      	movs	r2, #5
 8000786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000e010 	.word	0xe000e010

08000798 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80007a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ffdd 	bl	8000764 <LL_InitTick>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <LL_mDelay+0x48>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80007c2:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ca:	d00c      	beq.n	80007e6 <LL_mDelay+0x32>
  {
    Delay++;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3301      	adds	r3, #1
 80007d0:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80007d2:	e008      	b.n	80007e6 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <LL_mDelay+0x48>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d002      	beq.n	80007e6 <LL_mDelay+0x32>
    {
      Delay--;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3b01      	subs	r3, #1
 80007e4:	607b      	str	r3, [r7, #4]
  while (Delay)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1f3      	bne.n	80007d4 <LL_mDelay+0x20>
    }
  }
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000e010 	.word	0xe000e010

08000800 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000808:	4a04      	ldr	r2, [pc, #16]	; (800081c <LL_SetSystemCoreClock+0x1c>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6013      	str	r3, [r2, #0]
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	20000004 	.word	0x20000004

08000820 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800082a:	695a      	ldr	r2, [r3, #20]
 800082c:	4907      	ldr	r1, [pc, #28]	; (800084c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4313      	orrs	r3, r2
 8000832:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000836:	695a      	ldr	r2, [r3, #20]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4013      	ands	r3, r2
 800083c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800083e:	68fb      	ldr	r3, [r7, #12]
}
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	40021000 	.word	0x40021000

08000850 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	683a      	ldr	r2, [r7, #0]
 800085e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	463b      	mov	r3, r7
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
 8000880:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000882:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000886:	f7ff ffcb 	bl	8000820 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800088a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800088e:	f7ff ffc7 	bl	8000820 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3|LL_GPIO_PIN_4);
 8000892:	2118      	movs	r1, #24
 8000894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000898:	f7ff ffda 	bl	8000850 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7);
 800089c:	21f0      	movs	r1, #240	; 0xf0
 800089e:	4813      	ldr	r0, [pc, #76]	; (80008ec <MX_GPIO_Init+0x80>)
 80008a0:	f7ff ffd6 	bl	8000850 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4;
 80008a4:	2318      	movs	r3, #24
 80008a6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008a8:	2301      	movs	r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008b4:	2300      	movs	r3, #0
 80008b6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b8:	463b      	mov	r3, r7
 80008ba:	4619      	mov	r1, r3
 80008bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c0:	f7ff fd85 	bl	80003ce <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80008c4:	23f0      	movs	r3, #240	; 0xf0
 80008c6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008c8:	2301      	movs	r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008d4:	2300      	movs	r3, #0
 80008d6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d8:	463b      	mov	r3, r7
 80008da:	4619      	mov	r1, r3
 80008dc:	4803      	ldr	r0, [pc, #12]	; (80008ec <MX_GPIO_Init+0x80>)
 80008de:	f7ff fd76 	bl	80003ce <LL_GPIO_Init>

}
 80008e2:	bf00      	nop
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	48000400 	.word	0x48000400

080008f0 <hts221_read_byte>:
#include "hts221.h"

uint8_t address_hyg = HTS221_DEVICE_ADDRESS_0;

uint8_t hts221_read_byte(uint8_t reg_addr)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af02      	add	r7, sp, #8
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, address_hyg, 0));
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <hts221_read_byte+0x30>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	79fa      	ldrb	r2, [r7, #7]
 8000904:	f107 000f 	add.w	r0, r7, #15
 8000908:	2100      	movs	r1, #0
 800090a:	9100      	str	r1, [sp, #0]
 800090c:	2101      	movs	r1, #1
 800090e:	f000 fab9 	bl	8000e84 <i2c_master_read>
 8000912:	4603      	mov	r3, r0
 8000914:	781b      	ldrb	r3, [r3, #0]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000000 	.word	0x20000000

08000924 <hts221_write_byte>:


void hts221_write_byte(uint8_t reg_addr, uint8_t value)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, address_hyg, 0);
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <hts221_write_byte+0x28>)
 8000936:	781a      	ldrb	r2, [r3, #0]
 8000938:	79f9      	ldrb	r1, [r7, #7]
 800093a:	79b8      	ldrb	r0, [r7, #6]
 800093c:	2300      	movs	r3, #0
 800093e:	f000 fa5d 	bl	8000dfc <i2c_master_write>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000000 	.word	0x20000000

08000950 <hts221_init>:

	return val;
}

uint8_t hts221_init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8000956:	2301      	movs	r3, #1
 8000958:	71fb      	strb	r3, [r7, #7]

	LL_mDelay(100);
 800095a:	2064      	movs	r0, #100	; 0x64
 800095c:	f7ff ff2a 	bl	80007b4 <LL_mDelay>

	uint8_t val = hts221_read_byte(HTS221_WHO_AM_I_ADDRES);
 8000960:	200f      	movs	r0, #15
 8000962:	f7ff ffc5 	bl	80008f0 <hts221_read_byte>
 8000966:	4603      	mov	r3, r0
 8000968:	71bb      	strb	r3, [r7, #6]

	if(val == HTS221_WHO_AM_I_VALUE)
 800096a:	79bb      	ldrb	r3, [r7, #6]
 800096c:	2bbc      	cmp	r3, #188	; 0xbc
 800096e:	d101      	bne.n	8000974 <hts221_init+0x24>
	{
		status = 1;
 8000970:	2301      	movs	r3, #1
 8000972:	71fb      	strb	r3, [r7, #7]
	}

	uint8_t ctrl1 = 0b10000111;
 8000974:	2387      	movs	r3, #135	; 0x87
 8000976:	717b      	strb	r3, [r7, #5]
	hts221_write_byte(HTS221_ADDRESS_CTRL1, ctrl1);
 8000978:	797b      	ldrb	r3, [r7, #5]
 800097a:	4619      	mov	r1, r3
 800097c:	2020      	movs	r0, #32
 800097e:	f7ff ffd1 	bl	8000924 <hts221_write_byte>

	return status;
 8000982:	79fb      	ldrb	r3, [r7, #7]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <NVIC_GetPriorityGrouping+0x18>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	f003 0307 	and.w	r3, r3, #7
}
 800099a:	4618      	mov	r0, r3
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	f003 021f 	and.w	r2, r3, #31
 80009b8:	4907      	ldr	r1, [pc, #28]	; (80009d8 <NVIC_EnableIRQ+0x30>)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	095b      	lsrs	r3, r3, #5
 80009c0:	2001      	movs	r0, #1
 80009c2:	fa00 f202 	lsl.w	r2, r0, r2
 80009c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000e100 	.word	0xe000e100

080009dc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	6039      	str	r1, [r7, #0]
 80009e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80009e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	da0b      	bge.n	8000a08 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	490c      	ldr	r1, [pc, #48]	; (8000a28 <NVIC_SetPriority+0x4c>)
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	f003 030f 	and.w	r3, r3, #15
 80009fc:	3b04      	subs	r3, #4
 80009fe:	0112      	lsls	r2, r2, #4
 8000a00:	b2d2      	uxtb	r2, r2
 8000a02:	440b      	add	r3, r1
 8000a04:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a06:	e009      	b.n	8000a1c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	4907      	ldr	r1, [pc, #28]	; (8000a2c <NVIC_SetPriority+0x50>)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	0112      	lsls	r2, r2, #4
 8000a14:	b2d2      	uxtb	r2, r2
 8000a16:	440b      	add	r3, r1
 8000a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000ed00 	.word	0xe000ed00
 8000a2c:	e000e100 	.word	0xe000e100

08000a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b089      	sub	sp, #36	; 0x24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	f003 0307 	and.w	r3, r3, #7
 8000a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	f1c3 0307 	rsb	r3, r3, #7
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	bf28      	it	cs
 8000a4e:	2304      	movcs	r3, #4
 8000a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3304      	adds	r3, #4
 8000a56:	2b06      	cmp	r3, #6
 8000a58:	d902      	bls.n	8000a60 <NVIC_EncodePriority+0x30>
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3b03      	subs	r3, #3
 8000a5e:	e000      	b.n	8000a62 <NVIC_EncodePriority+0x32>
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a64:	f04f 32ff 	mov.w	r2, #4294967295
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43da      	mvns	r2, r3
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	401a      	ands	r2, r3
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a78:	f04f 31ff 	mov.w	r1, #4294967295
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a82:	43d9      	mvns	r1, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	4313      	orrs	r3, r2
         );
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3724      	adds	r7, #36	; 0x24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <LL_I2C_Enable>:
{
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f043 0201 	orr.w	r2, r3, #1
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	601a      	str	r2, [r3, #0]
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <LL_I2C_EnableClockStretching>:
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	601a      	str	r2, [r3, #0]
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <LL_I2C_DisableGeneralCall>:
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	601a      	str	r2, [r3, #0]
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <LL_I2C_SetOwnAddress2>:
{
 8000af6:	b480      	push	{r7}
 8000af8:	b085      	sub	sp, #20
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	60f8      	str	r0, [r7, #12]
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000b0a:	f023 0306 	bic.w	r3, r3, #6
 8000b0e:	68b9      	ldr	r1, [r7, #8]
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	430a      	orrs	r2, r1
 8000b14:	431a      	orrs	r2, r3
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	60da      	str	r2, [r3, #12]
}
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <LL_I2C_DisableOwnAddress2>:
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60da      	str	r2, [r3, #12]
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <LL_I2C_EnableIT_RX>:
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f043 0204 	orr.w	r2, r3, #4
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	601a      	str	r2, [r3, #0]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <LL_I2C_DisableIT_RX>:
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f023 0204 	bic.w	r2, r3, #4
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	601a      	str	r2, [r3, #0]
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <LL_I2C_IsActiveFlag_TXIS>:
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS));
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	bf0c      	ite	eq
 8000b9a:	2301      	moveq	r3, #1
 8000b9c:	2300      	movne	r3, #0
 8000b9e:	b2db      	uxtb	r3, r3
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <LL_I2C_IsActiveFlag_RXNE>:
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE));
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f003 0304 	and.w	r3, r3, #4
 8000bbc:	2b04      	cmp	r3, #4
 8000bbe:	bf0c      	ite	eq
 8000bc0:	2301      	moveq	r3, #1
 8000bc2:	2300      	movne	r3, #0
 8000bc4:	b2db      	uxtb	r3, r3
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <LL_I2C_IsActiveFlag_STOP>:
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF));
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	f003 0320 	and.w	r3, r3, #32
 8000be2:	2b20      	cmp	r3, #32
 8000be4:	bf0c      	ite	eq
 8000be6:	2301      	moveq	r3, #1
 8000be8:	2300      	movne	r3, #0
 8000bea:	b2db      	uxtb	r3, r3
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <LL_I2C_ClearFlag_STOP>:
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	69db      	ldr	r3, [r3, #28]
 8000c04:	f043 0220 	orr.w	r2, r3, #32
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	61da      	str	r2, [r3, #28]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <LL_I2C_EnableAutoEndMode>:
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	605a      	str	r2, [r3, #4]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
 8000c44:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	0d5b      	lsrs	r3, r3, #21
 8000c4e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <LL_I2C_HandleTransfer+0x48>)
 8000c54:	430b      	orrs	r3, r1
 8000c56:	43db      	mvns	r3, r3
 8000c58:	401a      	ands	r2, r3
 8000c5a:	68b9      	ldr	r1, [r7, #8]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4319      	orrs	r1, r3
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	041b      	lsls	r3, r3, #16
 8000c64:	4319      	orrs	r1, r3
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	4319      	orrs	r1, r3
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	430b      	orrs	r3, r1
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | TransferSize << I2C_CR2_NBYTES_Pos | EndMode | Request);
}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	03ff7bff 	.word	0x03ff7bff

08000c84 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c90:	b2db      	uxtb	r3, r3
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8000caa:	78fa      	ldrb	r2, [r7, #3]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <LL_AHB1_GRP1_EnableClock>:
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cc6:	695a      	ldr	r2, [r3, #20]
 8000cc8:	4907      	ldr	r1, [pc, #28]	; (8000ce8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cd2:	695a      	ldr	r2, [r3, #20]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cda:	68fb      	ldr	r3, [r7, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	40021000 	.word	0x40021000

08000cec <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000cf6:	69da      	ldr	r2, [r3, #28]
 8000cf8:	4907      	ldr	r1, [pc, #28]	; (8000d18 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d02:	69da      	ldr	r2, [r3, #28]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4013      	ands	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	40021000 	.word	0x40021000

08000d1c <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08e      	sub	sp, #56	; 0x38
 8000d20:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]
 8000d32:	615a      	str	r2, [r3, #20]
 8000d34:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
 8000d44:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000d46:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000d4a:	f7ff ffb7 	bl	8000cbc <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PA14   ------> I2C1_SDA
  PA15   ------> I2C1_SCL
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8000d4e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000d52:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d54:	2302      	movs	r3, #2
 8000d56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000d64:	2304      	movs	r3, #4
 8000d66:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d70:	f7ff fb2d 	bl	80003ce <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000d74:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000d78:	f7ff ffb8 	bl	8000cec <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d7c:	f7ff fe06 	bl	800098c <NVIC_GetPriorityGrouping>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2200      	movs	r2, #0
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fe52 	bl	8000a30 <NVIC_EncodePriority>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	4619      	mov	r1, r3
 8000d90:	201f      	movs	r0, #31
 8000d92:	f7ff fe23 	bl	80009dc <NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d96:	201f      	movs	r0, #31
 8000d98:	f7ff fe06 	bl	80009a8 <NVIC_EnableIRQ>
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8000d9c:	4815      	ldr	r0, [pc, #84]	; (8000df4 <MX_I2C1_Init+0xd8>)
 8000d9e:	f7ff ff3b 	bl	8000c18 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8000da2:	4814      	ldr	r0, [pc, #80]	; (8000df4 <MX_I2C1_Init+0xd8>)
 8000da4:	f7ff febf 	bl	8000b26 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8000da8:	4812      	ldr	r0, [pc, #72]	; (8000df4 <MX_I2C1_Init+0xd8>)
 8000daa:	f7ff fe94 	bl	8000ad6 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000dae:	4811      	ldr	r0, [pc, #68]	; (8000df4 <MX_I2C1_Init+0xd8>)
 8000db0:	f7ff fe81 	bl	8000ab6 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <MX_I2C1_Init+0xdc>)
 8000dba:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000dd0:	f107 031c 	add.w	r3, r7, #28
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4807      	ldr	r0, [pc, #28]	; (8000df4 <MX_I2C1_Init+0xd8>)
 8000dd8:	f7ff fc16 	bl	8000608 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2100      	movs	r1, #0
 8000de0:	4804      	ldr	r0, [pc, #16]	; (8000df4 <MX_I2C1_Init+0xd8>)
 8000de2:	f7ff fe88 	bl	8000af6 <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 8000de6:	4803      	ldr	r0, [pc, #12]	; (8000df4 <MX_I2C1_Init+0xd8>)
 8000de8:	f7ff fe55 	bl	8000a96 <LL_I2C_Enable>

}
 8000dec:	bf00      	nop
 8000dee:	3738      	adds	r7, #56	; 0x38
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40005400 	.word	0x40005400
 8000df8:	2000090e 	.word	0x2000090e

08000dfc <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8000dfc:	b590      	push	{r4, r7, lr}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af02      	add	r7, sp, #8
 8000e02:	4604      	mov	r4, r0
 8000e04:	4608      	mov	r0, r1
 8000e06:	4611      	mov	r1, r2
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4623      	mov	r3, r4
 8000e0c:	71fb      	strb	r3, [r7, #7]
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71bb      	strb	r3, [r7, #6]
 8000e12:	460b      	mov	r3, r1
 8000e14:	717b      	strb	r3, [r7, #5]
 8000e16:	4613      	mov	r3, r2
 8000e18:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8000e1a:	793b      	ldrb	r3, [r7, #4]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d003      	beq.n	8000e28 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 8000e20:	79bb      	ldrb	r3, [r7, #6]
 8000e22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e26:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8000e28:	7979      	ldrb	r1, [r7, #5]
 8000e2a:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <i2c_master_write+0x80>)
 8000e2c:	9301      	str	r3, [sp, #4]
 8000e2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	2302      	movs	r3, #2
 8000e36:	2200      	movs	r2, #0
 8000e38:	4811      	ldr	r0, [pc, #68]	; (8000e80 <i2c_master_write+0x84>)
 8000e3a:	f7ff fefd 	bl	8000c38 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 8000e3e:	79bb      	ldrb	r3, [r7, #6]
 8000e40:	4619      	mov	r1, r3
 8000e42:	480f      	ldr	r0, [pc, #60]	; (8000e80 <i2c_master_write+0x84>)
 8000e44:	f7ff ff2b 	bl	8000c9e <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8000e48:	e00a      	b.n	8000e60 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8000e4a:	480d      	ldr	r0, [pc, #52]	; (8000e80 <i2c_master_write+0x84>)
 8000e4c:	f7ff fe9b 	bl	8000b86 <LL_I2C_IsActiveFlag_TXIS>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d004      	beq.n	8000e60 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4809      	ldr	r0, [pc, #36]	; (8000e80 <i2c_master_write+0x84>)
 8000e5c:	f7ff ff1f 	bl	8000c9e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8000e60:	4807      	ldr	r0, [pc, #28]	; (8000e80 <i2c_master_write+0x84>)
 8000e62:	f7ff feb6 	bl	8000bd2 <LL_I2C_IsActiveFlag_STOP>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d0ee      	beq.n	8000e4a <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8000e6c:	4804      	ldr	r0, [pc, #16]	; (8000e80 <i2c_master_write+0x84>)
 8000e6e:	f7ff fec3 	bl	8000bf8 <LL_I2C_ClearFlag_STOP>
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd90      	pop	{r4, r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	80002000 	.word	0x80002000
 8000e80:	40005400 	.word	0x40005400

08000e84 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af02      	add	r7, sp, #8
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	4611      	mov	r1, r2
 8000e90:	461a      	mov	r2, r3
 8000e92:	4603      	mov	r3, r0
 8000e94:	70fb      	strb	r3, [r7, #3]
 8000e96:	460b      	mov	r3, r1
 8000e98:	70bb      	strb	r3, [r7, #2]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 8000e9e:	4a30      	ldr	r2, [pc, #192]	; (8000f60 <i2c_master_read+0xdc>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8000ea4:	7c3b      	ldrb	r3, [r7, #16]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8000eaa:	78bb      	ldrb	r3, [r7, #2]
 8000eac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000eb0:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 8000eb2:	4b2c      	ldr	r3, [pc, #176]	; (8000f64 <i2c_master_read+0xe0>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8000eb8:	482b      	ldr	r0, [pc, #172]	; (8000f68 <i2c_master_read+0xe4>)
 8000eba:	f7ff fe44 	bl	8000b46 <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8000ebe:	7879      	ldrb	r1, [r7, #1]
 8000ec0:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <i2c_master_read+0xe8>)
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	2301      	movs	r3, #1
 8000ecc:	2200      	movs	r2, #0
 8000ece:	4826      	ldr	r0, [pc, #152]	; (8000f68 <i2c_master_read+0xe4>)
 8000ed0:	f7ff feb2 	bl	8000c38 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8000ed4:	e00a      	b.n	8000eec <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8000ed6:	4824      	ldr	r0, [pc, #144]	; (8000f68 <i2c_master_read+0xe4>)
 8000ed8:	f7ff fe55 	bl	8000b86 <LL_I2C_IsActiveFlag_TXIS>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d004      	beq.n	8000eec <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 8000ee2:	78bb      	ldrb	r3, [r7, #2]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4820      	ldr	r0, [pc, #128]	; (8000f68 <i2c_master_read+0xe4>)
 8000ee8:	f7ff fed9 	bl	8000c9e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8000eec:	481e      	ldr	r0, [pc, #120]	; (8000f68 <i2c_master_read+0xe4>)
 8000eee:	f7ff fe70 	bl	8000bd2 <LL_I2C_IsActiveFlag_STOP>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0ee      	beq.n	8000ed6 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8000ef8:	481b      	ldr	r0, [pc, #108]	; (8000f68 <i2c_master_read+0xe4>)
 8000efa:	f7ff fe7d 	bl	8000bf8 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8000efe:	bf00      	nop
 8000f00:	4819      	ldr	r0, [pc, #100]	; (8000f68 <i2c_master_read+0xe4>)
 8000f02:	f7ff fe66 	bl	8000bd2 <LL_I2C_IsActiveFlag_STOP>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d1f9      	bne.n	8000f00 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8000f0c:	7879      	ldrb	r1, [r7, #1]
 8000f0e:	78fb      	ldrb	r3, [r7, #3]
 8000f10:	4a17      	ldr	r2, [pc, #92]	; (8000f70 <i2c_master_read+0xec>)
 8000f12:	9201      	str	r2, [sp, #4]
 8000f14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f18:	9200      	str	r2, [sp, #0]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	4812      	ldr	r0, [pc, #72]	; (8000f68 <i2c_master_read+0xe4>)
 8000f1e:	f7ff fe8b 	bl	8000c38 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8000f22:	bf00      	nop
 8000f24:	4810      	ldr	r0, [pc, #64]	; (8000f68 <i2c_master_read+0xe4>)
 8000f26:	f7ff fe54 	bl	8000bd2 <LL_I2C_IsActiveFlag_STOP>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d0f9      	beq.n	8000f24 <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <i2c_master_read+0xe4>)
 8000f32:	f7ff fe61 	bl	8000bf8 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8000f36:	480c      	ldr	r0, [pc, #48]	; (8000f68 <i2c_master_read+0xe4>)
 8000f38:	f7ff fe15 	bl	8000b66 <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <i2c_master_read+0xe4>)
 8000f3e:	69db      	ldr	r3, [r3, #28]
 8000f40:	4a09      	ldr	r2, [pc, #36]	; (8000f68 <i2c_master_read+0xe4>)
 8000f42:	f043 0310 	orr.w	r3, r3, #16
 8000f46:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8000f48:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <i2c_master_read+0xf0>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8000f4e:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <i2c_master_read+0xe0>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8000f54:	4b02      	ldr	r3, [pc, #8]	; (8000f60 <i2c_master_read+0xdc>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000024 	.word	0x20000024
 8000f64:	20000028 	.word	0x20000028
 8000f68:	40005400 	.word	0x40005400
 8000f6c:	80002000 	.word	0x80002000
 8000f70:	80002400 	.word	0x80002400
 8000f74:	20000029 	.word	0x20000029

08000f78 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8000f78:	b598      	push	{r3, r4, r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8000f7c:	4812      	ldr	r0, [pc, #72]	; (8000fc8 <I2C1_EV_IRQHandler+0x50>)
 8000f7e:	f7ff fe15 	bl	8000bac <LL_I2C_IsActiveFlag_RXNE>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d01c      	beq.n	8000fc2 <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8000f88:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <I2C1_EV_IRQHandler+0x54>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <I2C1_EV_IRQHandler+0x58>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	1c59      	adds	r1, r3, #1
 8000f94:	b2c8      	uxtb	r0, r1
 8000f96:	490e      	ldr	r1, [pc, #56]	; (8000fd0 <I2C1_EV_IRQHandler+0x58>)
 8000f98:	7008      	strb	r0, [r1, #0]
 8000f9a:	18d4      	adds	r4, r2, r3
 8000f9c:	480a      	ldr	r0, [pc, #40]	; (8000fc8 <I2C1_EV_IRQHandler+0x50>)
 8000f9e:	f7ff fe71 	bl	8000c84 <LL_I2C_ReceiveData8>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <I2C1_EV_IRQHandler+0x58>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b13      	cmp	r3, #19
 8000fae:	d903      	bls.n	8000fb8 <I2C1_EV_IRQHandler+0x40>
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <I2C1_EV_IRQHandler+0x58>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
 8000fb6:	e001      	b.n	8000fbc <I2C1_EV_IRQHandler+0x44>
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <I2C1_EV_IRQHandler+0x58>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <I2C1_EV_IRQHandler+0x5c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
	}
}
 8000fc2:	bf00      	nop
 8000fc4:	bd98      	pop	{r3, r4, r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40005400 	.word	0x40005400
 8000fcc:	20000024 	.word	0x20000024
 8000fd0:	20000029 	.word	0x20000029
 8000fd4:	20000028 	.word	0x20000028

08000fd8 <lis3mdl_read_byte>:
static uint8_t sLIS3MDLI2Caddress = LIS3MDL_DEVICE_ADDRESS;

uint64_t lastMovementTick = 0;

uint8_t lis3mdl_read_byte(uint8_t reg_addr)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, sLIS3MDLI2Caddress, 0));
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <lis3mdl_read_byte+0x30>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	79fa      	ldrb	r2, [r7, #7]
 8000fec:	f107 000f 	add.w	r0, r7, #15
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	9100      	str	r1, [sp, #0]
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	f7ff ff45 	bl	8000e84 <i2c_master_read>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	781b      	ldrb	r3, [r3, #0]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000001 	.word	0x20000001

0800100c <lis3mdl_write_byte>:

void lis3mdl_write_byte(uint8_t reg_addr, uint8_t value)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	460a      	mov	r2, r1
 8001016:	71fb      	strb	r3, [r7, #7]
 8001018:	4613      	mov	r3, r2
 800101a:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, sLIS3MDLI2Caddress, 0);
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <lis3mdl_write_byte+0x28>)
 800101e:	781a      	ldrb	r2, [r3, #0]
 8001020:	79f9      	ldrb	r1, [r7, #7]
 8001022:	79b8      	ldrb	r0, [r7, #6]
 8001024:	2300      	movs	r3, #0
 8001026:	f7ff fee9 	bl	8000dfc <i2c_master_write>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000001 	.word	0x20000001

08001038 <lis3mdl_init>:
	*z = (float)(zz/range_scale);
}


uint8_t lis3mdl_init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 800103e:	2301      	movs	r3, #1
 8001040:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8001042:	2064      	movs	r0, #100	; 0x64
 8001044:	f7ff fbb6 	bl	80007b4 <LL_mDelay>

	uint8_t val = lis3mdl_read_byte(LIS3MDL_WHO_AM_I_ADDRES);
 8001048:	200f      	movs	r0, #15
 800104a:	f7ff ffc5 	bl	8000fd8 <lis3mdl_read_byte>
 800104e:	4603      	mov	r3, r0
 8001050:	71bb      	strb	r3, [r7, #6]

	if(val == LIS3MDL_WHO_AM_I_VALUE)
 8001052:	79bb      	ldrb	r3, [r7, #6]
 8001054:	2b3d      	cmp	r3, #61	; 0x3d
 8001056:	d102      	bne.n	800105e <lis3mdl_init+0x26>
	{
		status = 1;
 8001058:	2301      	movs	r3, #1
 800105a:	71fb      	strb	r3, [r7, #7]
 800105c:	e011      	b.n	8001082 <lis3mdl_init+0x4a>
	}
	else			//if the device is not found on one address, try another one
	{
		sLIS3MDLI2Caddress = LIS3MDL_DEVICE_ADDRESS_ALTERNATIVE;
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <lis3mdl_init+0x8c>)
 8001060:	223c      	movs	r2, #60	; 0x3c
 8001062:	701a      	strb	r2, [r3, #0]
		val = lis3mdl_read_byte(LIS3MDL_WHO_AM_I_ADDRES);
 8001064:	200f      	movs	r0, #15
 8001066:	f7ff ffb7 	bl	8000fd8 <lis3mdl_read_byte>
 800106a:	4603      	mov	r3, r0
 800106c:	71bb      	strb	r3, [r7, #6]
		if(val == LIS3MDL_WHO_AM_I_VALUE)
 800106e:	79bb      	ldrb	r3, [r7, #6]
 8001070:	2b3d      	cmp	r3, #61	; 0x3d
 8001072:	d102      	bne.n	800107a <lis3mdl_init+0x42>
		{
			status = 1;
 8001074:	2301      	movs	r3, #1
 8001076:	71fb      	strb	r3, [r7, #7]
 8001078:	e003      	b.n	8001082 <lis3mdl_init+0x4a>
		}
		else
		{
			status = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	71fb      	strb	r3, [r7, #7]
			return status;
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	e01c      	b.n	80010bc <lis3mdl_init+0x84>
		}
	}

	//acc device init

	uint8_t ctrl1 = LIS3MDL_CTRL1_OM_UHP | LIS3MDL_CTRL1_DO_80HZ | (1 << 7);
 8001082:	23fc      	movs	r3, #252	; 0xfc
 8001084:	717b      	strb	r3, [r7, #5]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL1, ctrl1);
 8001086:	797b      	ldrb	r3, [r7, #5]
 8001088:	4619      	mov	r1, r3
 800108a:	2020      	movs	r0, #32
 800108c:	f7ff ffbe 	bl	800100c <lis3mdl_write_byte>

	uint8_t ctrl2 = LIS3MDL_CTRL2_FS_4GAUS;
 8001090:	2300      	movs	r3, #0
 8001092:	713b      	strb	r3, [r7, #4]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL2, ctrl2);
 8001094:	793b      	ldrb	r3, [r7, #4]
 8001096:	4619      	mov	r1, r3
 8001098:	2021      	movs	r0, #33	; 0x21
 800109a:	f7ff ffb7 	bl	800100c <lis3mdl_write_byte>

	uint8_t ctrl3 = LIS3MDL_CTRL3_MD_CONTINUES;
 800109e:	2300      	movs	r3, #0
 80010a0:	70fb      	strb	r3, [r7, #3]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL3, ctrl3);
 80010a2:	78fb      	ldrb	r3, [r7, #3]
 80010a4:	4619      	mov	r1, r3
 80010a6:	2022      	movs	r0, #34	; 0x22
 80010a8:	f7ff ffb0 	bl	800100c <lis3mdl_write_byte>

	uint8_t ctrl4 = LIS3MDL_CTRL4_OMZ_UHP;
 80010ac:	230c      	movs	r3, #12
 80010ae:	70bb      	strb	r3, [r7, #2]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL4, ctrl4);
 80010b0:	78bb      	ldrb	r3, [r7, #2]
 80010b2:	4619      	mov	r1, r3
 80010b4:	2023      	movs	r0, #35	; 0x23
 80010b6:	f7ff ffa9 	bl	800100c <lis3mdl_write_byte>

	return status;
 80010ba:	79fb      	ldrb	r3, [r7, #7]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000001 	.word	0x20000001

080010c8 <lps22hb_read_byte>:
#include "lps22hb.h"

uint8_t address_bar = LPS22HB_DEVICE_ADDRESS_0;

uint8_t lps22hb_read_byte(uint8_t reg_addr)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]

	uint8_t data = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, address_bar, 0));
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <lps22hb_read_byte+0x30>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	79fa      	ldrb	r2, [r7, #7]
 80010dc:	f107 000f 	add.w	r0, r7, #15
 80010e0:	2100      	movs	r1, #0
 80010e2:	9100      	str	r1, [sp, #0]
 80010e4:	2101      	movs	r1, #1
 80010e6:	f7ff fecd 	bl	8000e84 <i2c_master_read>
 80010ea:	4603      	mov	r3, r0
 80010ec:	781b      	ldrb	r3, [r3, #0]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000002 	.word	0x20000002

080010fc <lps22hb_write_byte>:


void lps22hb_write_byte(uint8_t reg_addr, uint8_t value)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	460a      	mov	r2, r1
 8001106:	71fb      	strb	r3, [r7, #7]
 8001108:	4613      	mov	r3, r2
 800110a:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, address_bar, 0);
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <lps22hb_write_byte+0x28>)
 800110e:	781a      	ldrb	r2, [r3, #0]
 8001110:	79f9      	ldrb	r1, [r7, #7]
 8001112:	79b8      	ldrb	r0, [r7, #6]
 8001114:	2300      	movs	r3, #0
 8001116:	f7ff fe71 	bl	8000dfc <i2c_master_write>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000002 	.word	0x20000002

08001128 <lps22hb_init>:

    return (temperature/100);
}

uint8_t lps22hb_init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
	uint8_t status = 1;
 800112e:	2301      	movs	r3, #1
 8001130:	71fb      	strb	r3, [r7, #7]

	LL_mDelay(100);
 8001132:	2064      	movs	r0, #100	; 0x64
 8001134:	f7ff fb3e 	bl	80007b4 <LL_mDelay>

	uint8_t val = lps22hb_read_byte(LPS22HB_WHO_AM_I_ADDRES);
 8001138:	200f      	movs	r0, #15
 800113a:	f7ff ffc5 	bl	80010c8 <lps22hb_read_byte>
 800113e:	4603      	mov	r3, r0
 8001140:	71bb      	strb	r3, [r7, #6]

	if(val == LPS22HB_WHO_AM_I_VALUE)
 8001142:	79bb      	ldrb	r3, [r7, #6]
 8001144:	2bb1      	cmp	r3, #177	; 0xb1
 8001146:	d102      	bne.n	800114e <lps22hb_init+0x26>
	{
		status = 1;
 8001148:	2301      	movs	r3, #1
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	e011      	b.n	8001172 <lps22hb_init+0x4a>
	}
	else
	{
		address_bar = LPS22HB_DEVICE_ADDRESS_1;
 800114e:	4b0f      	ldr	r3, [pc, #60]	; (800118c <lps22hb_init+0x64>)
 8001150:	22ba      	movs	r2, #186	; 0xba
 8001152:	701a      	strb	r2, [r3, #0]
		val = lps22hb_read_byte(LPS22HB_WHO_AM_I_ADDRES);
 8001154:	200f      	movs	r0, #15
 8001156:	f7ff ffb7 	bl	80010c8 <lps22hb_read_byte>
 800115a:	4603      	mov	r3, r0
 800115c:	71bb      	strb	r3, [r7, #6]
		if(val == LPS22HB_WHO_AM_I_VALUE)
 800115e:	79bb      	ldrb	r3, [r7, #6]
 8001160:	2bb1      	cmp	r3, #177	; 0xb1
 8001162:	d102      	bne.n	800116a <lps22hb_init+0x42>
		{
			status = 1;
 8001164:	2301      	movs	r3, #1
 8001166:	71fb      	strb	r3, [r7, #7]
 8001168:	e003      	b.n	8001172 <lps22hb_init+0x4a>
		}
		else
		{
			status = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	71fb      	strb	r3, [r7, #7]
			return status;
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	e007      	b.n	8001182 <lps22hb_init+0x5a>
		}
	}

	uint8_t ctrl1 = 0b01001010;
 8001172:	234a      	movs	r3, #74	; 0x4a
 8001174:	717b      	strb	r3, [r7, #5]
	lps22hb_write_byte(LPS22HB_ADDRESS_CTRL1, ctrl1);
 8001176:	797b      	ldrb	r3, [r7, #5]
 8001178:	4619      	mov	r1, r3
 800117a:	2010      	movs	r0, #16
 800117c:	f7ff ffbe 	bl	80010fc <lps22hb_write_byte>

	return status;
 8001180:	79fb      	ldrb	r3, [r7, #7]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000002 	.word	0x20000002

08001190 <lsm6ds0_read_byte>:
#include "lsm6ds0.h"

uint8_t addres = LSM6DS0_DEVICE_ADDRESS_0;

uint8_t lsm6ds0_read_byte(uint8_t reg_addr)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af02      	add	r7, sp, #8
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres, 0));
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <lsm6ds0_read_byte+0x30>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	79fa      	ldrb	r2, [r7, #7]
 80011a4:	f107 000f 	add.w	r0, r7, #15
 80011a8:	2100      	movs	r1, #0
 80011aa:	9100      	str	r1, [sp, #0]
 80011ac:	2101      	movs	r1, #1
 80011ae:	f7ff fe69 	bl	8000e84 <i2c_master_read>
 80011b2:	4603      	mov	r3, r0
 80011b4:	781b      	ldrb	r3, [r3, #0]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000003 	.word	0x20000003

080011c4 <lsm6ds0_write_byte>:


void lsm6ds0_write_byte(uint8_t reg_addr, uint8_t value)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	460a      	mov	r2, r1
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	4613      	mov	r3, r2
 80011d2:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres, 0);
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <lsm6ds0_write_byte+0x28>)
 80011d6:	781a      	ldrb	r2, [r3, #0]
 80011d8:	79f9      	ldrb	r1, [r7, #7]
 80011da:	79b8      	ldrb	r0, [r7, #6]
 80011dc:	2300      	movs	r3, #0
 80011de:	f7ff fe0d 	bl	8000dfc <i2c_master_write>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000003 	.word	0x20000003

080011f0 <lsm6ds0_init>:
	*z = (zz >> 4) / 1000.0f;
}


uint8_t lsm6ds0_init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 80011f6:	2301      	movs	r3, #1
 80011f8:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 80011fa:	2064      	movs	r0, #100	; 0x64
 80011fc:	f7ff fada 	bl	80007b4 <LL_mDelay>

	uint8_t val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8001200:	200f      	movs	r0, #15
 8001202:	f7ff ffc5 	bl	8001190 <lsm6ds0_read_byte>
 8001206:	4603      	mov	r3, r0
 8001208:	71bb      	strb	r3, [r7, #6]

	if(val == LSM6DS0_WHO_AM_I_VALUE)
 800120a:	79bb      	ldrb	r3, [r7, #6]
 800120c:	2b6a      	cmp	r3, #106	; 0x6a
 800120e:	d102      	bne.n	8001216 <lsm6ds0_init+0x26>
	{
		status = 1;
 8001210:	2301      	movs	r3, #1
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	e00f      	b.n	8001236 <lsm6ds0_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres = LSM6DS0_DEVICE_ADDRESS_1;
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <lsm6ds0_init+0x74>)
 8001218:	22d7      	movs	r2, #215	; 0xd7
 800121a:	701a      	strb	r2, [r3, #0]
		val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 800121c:	200f      	movs	r0, #15
 800121e:	f7ff ffb7 	bl	8001190 <lsm6ds0_read_byte>
 8001222:	4603      	mov	r3, r0
 8001224:	71bb      	strb	r3, [r7, #6]
		if(val == LSM6DS0_WHO_AM_I_VALUE)
 8001226:	79bb      	ldrb	r3, [r7, #6]
 8001228:	2b6a      	cmp	r3, #106	; 0x6a
 800122a:	d102      	bne.n	8001232 <lsm6ds0_init+0x42>
		{
			status = 1;
 800122c:	2301      	movs	r3, #1
 800122e:	71fb      	strb	r3, [r7, #7]
 8001230:	e001      	b.n	8001236 <lsm6ds0_init+0x46>
		}
		else
		{
			status = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	71fb      	strb	r3, [r7, #7]
			//return status;
		}
	}

	//acc device init
	uint8_t ctrl1 = lsm6ds0_read_byte(LSM6DS0_ADDRESS_CTRL1);
 8001236:	2010      	movs	r0, #16
 8001238:	f7ff ffaa 	bl	8001190 <lsm6ds0_read_byte>
 800123c:	4603      	mov	r3, r0
 800123e:	717b      	strb	r3, [r7, #5]
	ctrl1 &= ~0xFC;
 8001240:	797b      	ldrb	r3, [r7, #5]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	717b      	strb	r3, [r7, #5]
	ctrl1 |= 0x70;
 8001248:	797b      	ldrb	r3, [r7, #5]
 800124a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800124e:	717b      	strb	r3, [r7, #5]
	lsm6ds0_write_byte(LSM6DS0_ADDRESS_CTRL1, ctrl1);
 8001250:	797b      	ldrb	r3, [r7, #5]
 8001252:	4619      	mov	r1, r3
 8001254:	2010      	movs	r0, #16
 8001256:	f7ff ffb5 	bl	80011c4 <lsm6ds0_write_byte>

	return status;
 800125a:	79fb      	ldrb	r3, [r7, #7]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000003 	.word	0x20000003

08001268 <NVIC_SetPriorityGrouping>:
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <NVIC_SetPriorityGrouping+0x44>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001284:	4013      	ands	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129a:	4a04      	ldr	r2, [pc, #16]	; (80012ac <NVIC_SetPriorityGrouping+0x44>)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	60d3      	str	r3, [r2, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <LL_RCC_HSI_Enable+0x1c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a04      	ldr	r2, [pc, #16]	; (80012cc <LL_RCC_HSI_Enable+0x1c>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6013      	str	r3, [r2, #0]
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000

080012d0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <LL_RCC_HSI_IsReady+0x20>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b02      	cmp	r3, #2
 80012de:	bf0c      	ite	eq
 80012e0:	2301      	moveq	r3, #1
 80012e2:	2300      	movne	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	40021000 	.word	0x40021000

080012f4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	4904      	ldr	r1, [pc, #16]	; (800131c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800130a:	4313      	orrs	r3, r2
 800130c:	600b      	str	r3, [r1, #0]
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000

08001320 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <LL_RCC_SetSysClkSource+0x24>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f023 0203 	bic.w	r2, r3, #3
 8001330:	4904      	ldr	r1, [pc, #16]	; (8001344 <LL_RCC_SetSysClkSource+0x24>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	40021000 	.word	0x40021000

08001348 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <LL_RCC_GetSysClkSource+0x18>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 030c 	and.w	r3, r3, #12
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40021000 	.word	0x40021000

08001364 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <LL_RCC_SetAHBPrescaler+0x24>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001374:	4904      	ldr	r1, [pc, #16]	; (8001388 <LL_RCC_SetAHBPrescaler+0x24>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4313      	orrs	r3, r2
 800137a:	604b      	str	r3, [r1, #4]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	40021000 	.word	0x40021000

0800138c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800139c:	4904      	ldr	r1, [pc, #16]	; (80013b0 <LL_RCC_SetAPB1Prescaler+0x24>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	40021000 	.word	0x40021000

080013b4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013c4:	4904      	ldr	r1, [pc, #16]	; (80013d8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	40021000 	.word	0x40021000

080013dc <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <LL_RCC_SetI2CClockSource+0x2c>)
 80013e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	0e1b      	lsrs	r3, r3, #24
 80013ec:	43db      	mvns	r3, r3
 80013ee:	401a      	ands	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80013f6:	4904      	ldr	r1, [pc, #16]	; (8001408 <LL_RCC_SetI2CClockSource+0x2c>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	630b      	str	r3, [r1, #48]	; 0x30
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	40021000 	.word	0x40021000

0800140c <LL_APB1_GRP1_EnableClock>:
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001416:	69da      	ldr	r2, [r3, #28]
 8001418:	4907      	ldr	r1, [pc, #28]	; (8001438 <LL_APB1_GRP1_EnableClock+0x2c>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4313      	orrs	r3, r2
 800141e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001422:	69da      	ldr	r2, [r3, #28]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4013      	ands	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	40021000 	.word	0x40021000

0800143c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001446:	699a      	ldr	r2, [r3, #24]
 8001448:	4907      	ldr	r1, [pc, #28]	; (8001468 <LL_APB2_GRP1_EnableClock+0x2c>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4313      	orrs	r3, r2
 800144e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001452:	699a      	ldr	r2, [r3, #24]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4013      	ands	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800145a:	68fb      	ldr	r3, [r7, #12]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	40021000 	.word	0x40021000

0800146c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <LL_FLASH_SetLatency+0x24>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f023 0207 	bic.w	r2, r3, #7
 800147c:	4904      	ldr	r1, [pc, #16]	; (8001490 <LL_FLASH_SetLatency+0x24>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4313      	orrs	r3, r2
 8001482:	600b      	str	r3, [r1, #0]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	40022000 	.word	0x40022000

08001494 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <LL_FLASH_GetLatency+0x18>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0307 	and.w	r3, r3, #7
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40022000 	.word	0x40022000

080014b0 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d106      	bne.n	80014cc <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <LL_SYSTICK_SetClkSource+0x34>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <LL_SYSTICK_SetClkSource+0x34>)
 80014c4:	f043 0304 	orr.w	r3, r3, #4
 80014c8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 80014ca:	e005      	b.n	80014d8 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <LL_SYSTICK_SetClkSource+0x34>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <LL_SYSTICK_SetClkSource+0x34>)
 80014d2:	f023 0304 	bic.w	r3, r3, #4
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000e010 	.word	0xe000e010

080014e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80014ee:	2001      	movs	r0, #1
 80014f0:	f7ff ffa4 	bl	800143c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80014f4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80014f8:	f7ff ff88 	bl	800140c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014fc:	2003      	movs	r0, #3
 80014fe:	f7ff feb3 	bl	8001268 <NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001502:	f000 f8ab 	bl	800165c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001506:	f7ff f9b1 	bl	800086c <MX_GPIO_Init>
  MX_SPI1_Init();
 800150a:	f000 f9bd 	bl	8001888 <MX_SPI1_Init>
  MX_I2C1_Init();
 800150e:	f7ff fc05 	bl	8000d1c <MX_I2C1_Init>
  //MX_DMA_Init();
 // MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

  lsm6ds0_init();
 8001512:	f7ff fe6d 	bl	80011f0 <lsm6ds0_init>
    hts221_init();
 8001516:	f7ff fa1b 	bl	8000950 <hts221_init>
    lps22hb_init();
 800151a:	f7ff fe05 	bl	8001128 <lps22hb_init>
    lis3mdl_init();
 800151e:	f7ff fd8b 	bl	8001038 <lis3mdl_init>


  initCD_Pin();
 8001522:	f000 fa51 	bl	80019c8 <initCD_Pin>
   initCS_Pin();
 8001526:	f000 fa35 	bl	8001994 <initCS_Pin>
   initRES_Pin();
 800152a:	f000 fa69 	bl	8001a00 <initRES_Pin>

   LL_mDelay(50);
 800152e:	2032      	movs	r0, #50	; 0x32
 8001530:	f7ff f940 	bl	80007b4 <LL_mDelay>

   lcdInitialise(LCD_ORIENTATION3);
 8001534:	20c0      	movs	r0, #192	; 0xc0
 8001536:	f000 fb6c 	bl	8001c12 <lcdInitialise>
   lcdClearDisplay(decodeRgbValue(0, 0, 0));
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	2000      	movs	r0, #0
 8001540:	f000 fd54 	bl	8001fec <decodeRgbValue>
 8001544:	4603      	mov	r3, r0
 8001546:	4618      	mov	r0, r3
 8001548:	f000 fc3e 	bl	8001dc8 <lcdClearDisplay>

   lcdPutS("VRS 2019", lcdTextX(2), lcdTextY(1), decodeRgbValue(0, 0, 0), decodeRgbValue(31, 31, 31));
 800154c:	2002      	movs	r0, #2
 800154e:	f000 fd69 	bl	8002024 <lcdTextX>
 8001552:	4603      	mov	r3, r0
 8001554:	461c      	mov	r4, r3
 8001556:	2001      	movs	r0, #1
 8001558:	f000 fd75 	bl	8002046 <lcdTextY>
 800155c:	4603      	mov	r3, r0
 800155e:	461d      	mov	r5, r3
 8001560:	2200      	movs	r2, #0
 8001562:	2100      	movs	r1, #0
 8001564:	2000      	movs	r0, #0
 8001566:	f000 fd41 	bl	8001fec <decodeRgbValue>
 800156a:	4603      	mov	r3, r0
 800156c:	461e      	mov	r6, r3
 800156e:	221f      	movs	r2, #31
 8001570:	211f      	movs	r1, #31
 8001572:	201f      	movs	r0, #31
 8001574:	f000 fd3a 	bl	8001fec <decodeRgbValue>
 8001578:	4603      	mov	r3, r0
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	4633      	mov	r3, r6
 800157e:	462a      	mov	r2, r5
 8001580:	4621      	mov	r1, r4
 8001582:	4833      	ldr	r0, [pc, #204]	; (8001650 <main+0x168>)
 8001584:	f000 fd6d 	bl	8002062 <lcdPutS>
   lcdPutS("Cvicenie 8", lcdTextX(2), lcdTextY(4), decodeRgbValue(255, 255, 255), decodeRgbValue(0, 0, 0));
 8001588:	2002      	movs	r0, #2
 800158a:	f000 fd4b 	bl	8002024 <lcdTextX>
 800158e:	4603      	mov	r3, r0
 8001590:	461c      	mov	r4, r3
 8001592:	2004      	movs	r0, #4
 8001594:	f000 fd57 	bl	8002046 <lcdTextY>
 8001598:	4603      	mov	r3, r0
 800159a:	461d      	mov	r5, r3
 800159c:	22ff      	movs	r2, #255	; 0xff
 800159e:	21ff      	movs	r1, #255	; 0xff
 80015a0:	20ff      	movs	r0, #255	; 0xff
 80015a2:	f000 fd23 	bl	8001fec <decodeRgbValue>
 80015a6:	4603      	mov	r3, r0
 80015a8:	461e      	mov	r6, r3
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	2000      	movs	r0, #0
 80015b0:	f000 fd1c 	bl	8001fec <decodeRgbValue>
 80015b4:	4603      	mov	r3, r0
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	4633      	mov	r3, r6
 80015ba:	462a      	mov	r2, r5
 80015bc:	4621      	mov	r1, r4
 80015be:	4825      	ldr	r0, [pc, #148]	; (8001654 <main+0x16c>)
 80015c0:	f000 fd4f 	bl	8002062 <lcdPutS>
   lcdPutS("SPI komunikacia", lcdTextX(2), lcdTextY(5), decodeRgbValue(255, 255, 255), decodeRgbValue(0, 0, 0));
 80015c4:	2002      	movs	r0, #2
 80015c6:	f000 fd2d 	bl	8002024 <lcdTextX>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461c      	mov	r4, r3
 80015ce:	2005      	movs	r0, #5
 80015d0:	f000 fd39 	bl	8002046 <lcdTextY>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461d      	mov	r5, r3
 80015d8:	22ff      	movs	r2, #255	; 0xff
 80015da:	21ff      	movs	r1, #255	; 0xff
 80015dc:	20ff      	movs	r0, #255	; 0xff
 80015de:	f000 fd05 	bl	8001fec <decodeRgbValue>
 80015e2:	4603      	mov	r3, r0
 80015e4:	461e      	mov	r6, r3
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	2000      	movs	r0, #0
 80015ec:	f000 fcfe 	bl	8001fec <decodeRgbValue>
 80015f0:	4603      	mov	r3, r0
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	4633      	mov	r3, r6
 80015f6:	462a      	mov	r2, r5
 80015f8:	4621      	mov	r1, r4
 80015fa:	4817      	ldr	r0, [pc, #92]	; (8001658 <main+0x170>)
 80015fc:	f000 fd31 	bl	8002062 <lcdPutS>

   uint8_t state = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  state ? lcdFilledRectangle(10, 75, 34, 99, decodeRgbValue(31, 0, 0)) : lcdFilledRectangle(10, 75, 34, 99, decodeRgbValue(0, 31, 0));
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00d      	beq.n	8001626 <main+0x13e>
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	201f      	movs	r0, #31
 8001610:	f000 fcec 	bl	8001fec <decodeRgbValue>
 8001614:	4603      	mov	r3, r0
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2363      	movs	r3, #99	; 0x63
 800161a:	2222      	movs	r2, #34	; 0x22
 800161c:	214b      	movs	r1, #75	; 0x4b
 800161e:	200a      	movs	r0, #10
 8001620:	f000 fc11 	bl	8001e46 <lcdFilledRectangle>
 8001624:	e00c      	b.n	8001640 <main+0x158>
 8001626:	2200      	movs	r2, #0
 8001628:	211f      	movs	r1, #31
 800162a:	2000      	movs	r0, #0
 800162c:	f000 fcde 	bl	8001fec <decodeRgbValue>
 8001630:	4603      	mov	r3, r0
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2363      	movs	r3, #99	; 0x63
 8001636:	2222      	movs	r2, #34	; 0x22
 8001638:	214b      	movs	r1, #75	; 0x4b
 800163a:	200a      	movs	r0, #10
 800163c:	f000 fc03 	bl	8001e46 <lcdFilledRectangle>
	  		state ^= 1;
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	f083 0301 	eor.w	r3, r3, #1
 8001646:	71fb      	strb	r3, [r7, #7]

	  		LL_mDelay(100);
 8001648:	2064      	movs	r0, #100	; 0x64
 800164a:	f7ff f8b3 	bl	80007b4 <LL_mDelay>
	  state ? lcdFilledRectangle(10, 75, 34, 99, decodeRgbValue(31, 0, 0)) : lcdFilledRectangle(10, 75, 34, 99, decodeRgbValue(0, 31, 0));
 800164e:	e7d9      	b.n	8001604 <main+0x11c>
 8001650:	0800214c 	.word	0x0800214c
 8001654:	08002158 	.word	0x08002158
 8001658:	08002164 	.word	0x08002164

0800165c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001660:	2000      	movs	r0, #0
 8001662:	f7ff ff03 	bl	800146c <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8001666:	f7ff ff15 	bl	8001494 <LL_FLASH_GetLatency>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <SystemClock_Config+0x18>
  {
  Error_Handler();
 8001670:	f000 f82e 	bl	80016d0 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8001674:	f7ff fe1c 	bl	80012b0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001678:	bf00      	nop
 800167a:	f7ff fe29 	bl	80012d0 <LL_RCC_HSI_IsReady>
 800167e:	4603      	mov	r3, r0
 8001680:	2b01      	cmp	r3, #1
 8001682:	d1fa      	bne.n	800167a <SystemClock_Config+0x1e>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001684:	2010      	movs	r0, #16
 8001686:	f7ff fe35 	bl	80012f4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800168a:	2000      	movs	r0, #0
 800168c:	f7ff fe6a 	bl	8001364 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001690:	2000      	movs	r0, #0
 8001692:	f7ff fe7b 	bl	800138c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8001696:	2000      	movs	r0, #0
 8001698:	f7ff fe8c 	bl	80013b4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800169c:	2000      	movs	r0, #0
 800169e:	f7ff fe3f 	bl	8001320 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80016a2:	bf00      	nop
 80016a4:	f7ff fe50 	bl	8001348 <LL_RCC_GetSysClkSource>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1fa      	bne.n	80016a4 <SystemClock_Config+0x48>
  {

  }
  LL_Init1msTick(8000000);
 80016ae:	4807      	ldr	r0, [pc, #28]	; (80016cc <SystemClock_Config+0x70>)
 80016b0:	f7ff f872 	bl	8000798 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 80016b4:	2004      	movs	r0, #4
 80016b6:	f7ff fefb 	bl	80014b0 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 80016ba:	4804      	ldr	r0, [pc, #16]	; (80016cc <SystemClock_Config+0x70>)
 80016bc:	f7ff f8a0 	bl	8000800 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 80016c0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80016c4:	f7ff fe8a 	bl	80013dc <LL_RCC_SetI2CClockSource>
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	007a1200 	.word	0x007a1200

080016d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <LL_AHB1_GRP1_EnableClock>:
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016ea:	695a      	ldr	r2, [r3, #20]
 80016ec:	4907      	ldr	r1, [pc, #28]	; (800170c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016f6:	695a      	ldr	r2, [r3, #20]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4013      	ands	r3, r2
 80016fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016fe:	68fb      	ldr	r3, [r7, #12]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	40021000 	.word	0x40021000

08001710 <LL_APB2_GRP1_EnableClock>:
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <LL_APB2_GRP1_EnableClock+0x2c>)
 800171a:	699a      	ldr	r2, [r3, #24]
 800171c:	4907      	ldr	r1, [pc, #28]	; (800173c <LL_APB2_GRP1_EnableClock+0x2c>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4313      	orrs	r3, r2
 8001722:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001726:	699a      	ldr	r2, [r3, #24]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4013      	ands	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800172e:	68fb      	ldr	r3, [r7, #12]
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	40021000 	.word	0x40021000

08001740 <LL_SPI_Enable>:
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	601a      	str	r2, [r3, #0]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <LL_SPI_SetStandard>:
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f023 0210 	bic.w	r2, r3, #16
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	431a      	orrs	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	605a      	str	r2, [r3, #4]
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f043 0208 	orr.w	r2, r3, #8
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	605a      	str	r2, [r3, #4]
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f023 0208 	bic.w	r2, r3, #8
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	605a      	str	r2, [r3, #4]
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	bf0c      	ite	eq
 80017da:	2301      	moveq	r3, #1
 80017dc:	2300      	movne	r3, #0
 80017de:	b2db      	uxtb	r3, r3
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	bf0c      	ite	eq
 8001800:	2301      	moveq	r3, #1
 8001802:	2300      	movne	r3, #0
 8001804:	b2db      	uxtb	r3, r3
}
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	b2db      	uxtb	r3, r3
}
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	330c      	adds	r3, #12
 800183c:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	78fa      	ldrb	r2, [r7, #3]
 8001842:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif
}
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LL_GPIO_SetOutputPin>:
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	619a      	str	r2, [r3, #24]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <LL_GPIO_ResetOutputPin>:
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b090      	sub	sp, #64	; 0x40
 800188c:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800188e:	f107 0318 	add.w	r3, r7, #24
 8001892:	2228      	movs	r2, #40	; 0x28
 8001894:	2100      	movs	r1, #0
 8001896:	4618      	mov	r0, r3
 8001898:	f000 fc44 	bl	8002124 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	463b      	mov	r3, r7
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]
 80018aa:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80018ac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80018b0:	f7ff ff2e 	bl	8001710 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80018b4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80018b8:	f7ff ff12 	bl	80016e0 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80018bc:	23e0      	movs	r3, #224	; 0xe0
 80018be:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80018c0:	2302      	movs	r3, #2
 80018c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80018c4:	2303      	movs	r3, #3
 80018c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018cc:	2300      	movs	r3, #0
 80018ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80018d0:	2305      	movs	r3, #5
 80018d2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d4:	463b      	mov	r3, r7
 80018d6:	4619      	mov	r1, r3
 80018d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018dc:	f7fe fd77 	bl	80003ce <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80018e4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80018e8:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80018ea:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80018ee:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80018f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 80018fe:	2310      	movs	r3, #16
 8001900:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001902:	2300      	movs	r3, #0
 8001904:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001906:	2300      	movs	r3, #0
 8001908:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 800190a:	2307      	movs	r3, #7
 800190c:	63fb      	str	r3, [r7, #60]	; 0x3c

  SPI1->CR2 |= 1 << 12;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_SPI1_Init+0xc0>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	4a0d      	ldr	r2, [pc, #52]	; (8001948 <MX_SPI1_Init+0xc0>)
 8001914:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001918:	6053      	str	r3, [r2, #4]

  LL_SPI_Init(SPI1, &SPI_InitStruct);
 800191a:	f107 0318 	add.w	r3, r7, #24
 800191e:	4619      	mov	r1, r3
 8001920:	4809      	ldr	r0, [pc, #36]	; (8001948 <MX_SPI1_Init+0xc0>)
 8001922:	f7fe fed0 	bl	80006c6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8001926:	2100      	movs	r1, #0
 8001928:	4807      	ldr	r0, [pc, #28]	; (8001948 <MX_SPI1_Init+0xc0>)
 800192a:	f7ff ff19 	bl	8001760 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 800192e:	4806      	ldr	r0, [pc, #24]	; (8001948 <MX_SPI1_Init+0xc0>)
 8001930:	f7ff ff39 	bl	80017a6 <LL_SPI_DisableNSSPulseMgt>
  LL_SPI_EnableNSSPulseMgt(SPI1);
 8001934:	4804      	ldr	r0, [pc, #16]	; (8001948 <MX_SPI1_Init+0xc0>)
 8001936:	f7ff ff26 	bl	8001786 <LL_SPI_EnableNSSPulseMgt>
  LL_SPI_Enable(SPI1);
 800193a:	4803      	ldr	r0, [pc, #12]	; (8001948 <MX_SPI1_Init+0xc0>)
 800193c:	f7ff ff00 	bl	8001740 <LL_SPI_Enable>

}
 8001940:	bf00      	nop
 8001942:	3740      	adds	r7, #64	; 0x40
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40013000 	.word	0x40013000

0800194c <readWriteSPI1>:

/* USER CODE BEGIN 1 */

unsigned char readWriteSPI1(unsigned char txData)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
	unsigned char  rxData;

	LL_SPI_TransmitData8(SPI1, (uint8_t)txData);
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	4619      	mov	r1, r3
 800195a:	480d      	ldr	r0, [pc, #52]	; (8001990 <readWriteSPI1+0x44>)
 800195c:	f7ff ff66 	bl	800182c <LL_SPI_TransmitData8>
	while(LL_SPI_IsActiveFlag_TXE(SPI1) != SET);
 8001960:	bf00      	nop
 8001962:	480b      	ldr	r0, [pc, #44]	; (8001990 <readWriteSPI1+0x44>)
 8001964:	f7ff ff42 	bl	80017ec <LL_SPI_IsActiveFlag_TXE>
 8001968:	4603      	mov	r3, r0
 800196a:	2b01      	cmp	r3, #1
 800196c:	d1f9      	bne.n	8001962 <readWriteSPI1+0x16>

	// wait until RXNE = 1
	while(LL_SPI_IsActiveFlag_RXNE(SPI1) != SET);
 800196e:	bf00      	nop
 8001970:	4807      	ldr	r0, [pc, #28]	; (8001990 <readWriteSPI1+0x44>)
 8001972:	f7ff ff28 	bl	80017c6 <LL_SPI_IsActiveFlag_RXNE>
 8001976:	4603      	mov	r3, r0
 8001978:	2b01      	cmp	r3, #1
 800197a:	d1f9      	bne.n	8001970 <readWriteSPI1+0x24>
	// read the rx buff to clear the RXNE flag (garbage)
	rxData = LL_SPI_ReceiveData8(SPI1);
 800197c:	4804      	ldr	r0, [pc, #16]	; (8001990 <readWriteSPI1+0x44>)
 800197e:	f7ff ff48 	bl	8001812 <LL_SPI_ReceiveData8>
 8001982:	4603      	mov	r3, r0
 8001984:	73fb      	strb	r3, [r7, #15]

	return rxData;
 8001986:	7bfb      	ldrb	r3, [r7, #15]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40013000 	.word	0x40013000

08001994 <initCS_Pin>:

void initCS_Pin(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	*/
	cs_set();
 8001998:	f000 f802 	bl	80019a0 <cs_set>
}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}

080019a0 <cs_set>:

void cs_set(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 80019a4:	2120      	movs	r1, #32
 80019a6:	4802      	ldr	r0, [pc, #8]	; (80019b0 <cs_set+0x10>)
 80019a8:	f7ff ff52 	bl	8001850 <LL_GPIO_SetOutputPin>
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	48000400 	.word	0x48000400

080019b4 <cs_reset>:

void cs_reset(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 80019b8:	2120      	movs	r1, #32
 80019ba:	4802      	ldr	r0, [pc, #8]	; (80019c4 <cs_reset+0x10>)
 80019bc:	f7ff ff56 	bl	800186c <LL_GPIO_ResetOutputPin>
}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	48000400 	.word	0x48000400

080019c8 <initCD_Pin>:

void initCD_Pin(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	*/
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <cd_set>:

void cd_set(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);
 80019dc:	2140      	movs	r1, #64	; 0x40
 80019de:	4802      	ldr	r0, [pc, #8]	; (80019e8 <cd_set+0x10>)
 80019e0:	f7ff ff36 	bl	8001850 <LL_GPIO_SetOutputPin>
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	48000400 	.word	0x48000400

080019ec <cd_reset>:

void cd_reset(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 80019f0:	2140      	movs	r1, #64	; 0x40
 80019f2:	4802      	ldr	r0, [pc, #8]	; (80019fc <cd_reset+0x10>)
 80019f4:	f7ff ff3a 	bl	800186c <LL_GPIO_ResetOutputPin>
}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	48000400 	.word	0x48000400

08001a00 <initRES_Pin>:

void initRES_Pin(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	*/
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <res_set>:

void res_set(void)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8001a12:	2108      	movs	r1, #8
 8001a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a18:	f7ff ff1a 	bl	8001850 <LL_GPIO_SetOutputPin>
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <res_reset>:

void res_reset(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8001a24:	2108      	movs	r1, #8
 8001a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a2a:	f7ff ff1f 	bl	800186c <LL_GPIO_ResetOutputPin>
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <HardFault_Handler+0x4>

08001a46 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <MemManage_Handler+0x4>

08001a4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <BusFault_Handler+0x4>

08001a52 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a56:	e7fe      	b.n	8001a56 <UsageFault_Handler+0x4>

08001a58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a94:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <SystemInit+0x84>)
 8001a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9a:	4a1e      	ldr	r2, [pc, #120]	; (8001b14 <SystemInit+0x84>)
 8001a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001aa4:	4b1c      	ldr	r3, [pc, #112]	; (8001b18 <SystemInit+0x88>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a1b      	ldr	r2, [pc, #108]	; (8001b18 <SystemInit+0x88>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001ab0:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <SystemInit+0x88>)
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	4918      	ldr	r1, [pc, #96]	; (8001b18 <SystemInit+0x88>)
 8001ab6:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <SystemInit+0x8c>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001abc:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <SystemInit+0x88>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a15      	ldr	r2, [pc, #84]	; (8001b18 <SystemInit+0x88>)
 8001ac2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <SystemInit+0x88>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a11      	ldr	r2, [pc, #68]	; (8001b18 <SystemInit+0x88>)
 8001ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <SystemInit+0x88>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	4a0e      	ldr	r2, [pc, #56]	; (8001b18 <SystemInit+0x88>)
 8001ade:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001ae2:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <SystemInit+0x88>)
 8001ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae8:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <SystemInit+0x88>)
 8001aea:	f023 030f 	bic.w	r3, r3, #15
 8001aee:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <SystemInit+0x88>)
 8001af2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001af4:	4908      	ldr	r1, [pc, #32]	; (8001b18 <SystemInit+0x88>)
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <SystemInit+0x90>)
 8001af8:	4013      	ands	r3, r2
 8001afa:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <SystemInit+0x88>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b02:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <SystemInit+0x84>)
 8001b04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b08:	609a      	str	r2, [r3, #8]
#endif
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000ed00 	.word	0xe000ed00
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	f87fc00c 	.word	0xf87fc00c
 8001b20:	ff00fccc 	.word	0xff00fccc

08001b24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b5c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b28:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b2a:	e003      	b.n	8001b34 <LoopCopyDataInit>

08001b2c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b2e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b30:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b32:	3104      	adds	r1, #4

08001b34 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b34:	480b      	ldr	r0, [pc, #44]	; (8001b64 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b38:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b3a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b3c:	d3f6      	bcc.n	8001b2c <CopyDataInit>
	ldr	r2, =_sbss
 8001b3e:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b40:	e002      	b.n	8001b48 <LoopFillZerobss>

08001b42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b42:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b44:	f842 3b04 	str.w	r3, [r2], #4

08001b48 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <LoopForever+0x16>)
	cmp	r2, r3
 8001b4a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b4c:	d3f9      	bcc.n	8001b42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b4e:	f7ff ff9f 	bl	8001a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b52:	f000 fac3 	bl	80020dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b56:	f7ff fcc7 	bl	80014e8 <main>

08001b5a <LoopForever>:

LoopForever:
    b LoopForever
 8001b5a:	e7fe      	b.n	8001b5a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b5c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001b60:	0800247c 	.word	0x0800247c
	ldr	r0, =_sdata
 8001b64:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b68:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 8001b6c:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 8001b70:	2000002c 	.word	0x2000002c

08001b74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b74:	e7fe      	b.n	8001b74 <ADC1_2_IRQHandler>

08001b76 <lcdReset>:

// Low-level LCD driving functions --------------------------------------------------------------------------

// Reset the LCD hardware
void lcdReset(void)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	af00      	add	r7, sp, #0
	// Reset pin is active low (0 = reset, 1 = ready)
	res_reset();
 8001b7a:	f7ff ff51 	bl	8001a20 <res_reset>
	LL_mDelay(100);
 8001b7e:	2064      	movs	r0, #100	; 0x64
 8001b80:	f7fe fe18 	bl	80007b4 <LL_mDelay>

	res_set();
 8001b84:	f7ff ff43 	bl	8001a0e <res_set>
	LL_mDelay(100);
 8001b88:	2064      	movs	r0, #100	; 0x64
 8001b8a:	f7fe fe13 	bl	80007b4 <LL_mDelay>
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <lcdWriteCommand>:

void lcdWriteCommand(uint8_t address)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	71fb      	strb	r3, [r7, #7]
	cd_reset();
 8001b9c:	f7ff ff26 	bl	80019ec <cd_reset>
	cs_reset();
 8001ba0:	f7ff ff08 	bl	80019b4 <cs_reset>
	readWriteSPI1(address);
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fed0 	bl	800194c <readWriteSPI1>
	cs_set();
 8001bac:	f7ff fef8 	bl	80019a0 <cs_set>
}
 8001bb0:	bf00      	nop
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <lcdWriteParameter>:

void lcdWriteParameter(uint8_t parameter)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
	cd_set();
 8001bc2:	f7ff ff09 	bl	80019d8 <cd_set>
	cs_reset();
 8001bc6:	f7ff fef5 	bl	80019b4 <cs_reset>
	readWriteSPI1(parameter);
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff febd 	bl	800194c <readWriteSPI1>
	cs_set();
 8001bd2:	f7ff fee5 	bl	80019a0 <cs_set>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <lcdWriteData>:

void lcdWriteData(uint8_t dataByte1, uint8_t dataByte2)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	460a      	mov	r2, r1
 8001be8:	71fb      	strb	r3, [r7, #7]
 8001bea:	4613      	mov	r3, r2
 8001bec:	71bb      	strb	r3, [r7, #6]
	cd_set();
 8001bee:	f7ff fef3 	bl	80019d8 <cd_set>
	cs_reset();
 8001bf2:	f7ff fedf 	bl	80019b4 <cs_reset>
	readWriteSPI1(dataByte1);
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fea7 	bl	800194c <readWriteSPI1>
	readWriteSPI1(dataByte2);
 8001bfe:	79bb      	ldrb	r3, [r7, #6]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fea3 	bl	800194c <readWriteSPI1>
	cs_set();
 8001c06:	f7ff fecb 	bl	80019a0 <cs_set>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <lcdInitialise>:

void lcdInitialise(uint8_t orientation)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	71fb      	strb	r3, [r7, #7]
	// Set up the IO ports for communication with the LCD


	// Hardware reset the LCD
	lcdReset();
 8001c1c:	f7ff ffab 	bl	8001b76 <lcdReset>

    lcdWriteCommand(EXIT_SLEEP_MODE);
 8001c20:	2011      	movs	r0, #17
 8001c22:	f7ff ffb6 	bl	8001b92 <lcdWriteCommand>
    LL_mDelay(100); //Delay(10000); // Wait for the screen to wake up
 8001c26:	2064      	movs	r0, #100	; 0x64
 8001c28:	f7fe fdc4 	bl	80007b4 <LL_mDelay>

    lcdWriteCommand(SET_PIXEL_FORMAT);
 8001c2c:	203a      	movs	r0, #58	; 0x3a
 8001c2e:	f7ff ffb0 	bl	8001b92 <lcdWriteCommand>
    lcdWriteParameter(0x05); // 16 bits per pixel
 8001c32:	2005      	movs	r0, #5
 8001c34:	f7ff ffc0 	bl	8001bb8 <lcdWriteParameter>

    lcdWriteCommand(SET_GAMMA_CURVE);
 8001c38:	2026      	movs	r0, #38	; 0x26
 8001c3a:	f7ff ffaa 	bl	8001b92 <lcdWriteCommand>
    lcdWriteParameter(0x04); // Select gamma curve 3
 8001c3e:	2004      	movs	r0, #4
 8001c40:	f7ff ffba 	bl	8001bb8 <lcdWriteParameter>

    lcdWriteCommand(GAM_R_SEL);
 8001c44:	20f2      	movs	r0, #242	; 0xf2
 8001c46:	f7ff ffa4 	bl	8001b92 <lcdWriteCommand>
    lcdWriteParameter(0x01); // Gamma adjustment enabled
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f7ff ffb4 	bl	8001bb8 <lcdWriteParameter>

    lcdWriteCommand(POSITIVE_GAMMA_CORRECT);
 8001c50:	20e0      	movs	r0, #224	; 0xe0
 8001c52:	f7ff ff9e 	bl	8001b92 <lcdWriteCommand>
    lcdWriteParameter(0x3f); // 1st Parameter
 8001c56:	203f      	movs	r0, #63	; 0x3f
 8001c58:	f7ff ffae 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x25); // 2nd Parameter
 8001c5c:	2025      	movs	r0, #37	; 0x25
 8001c5e:	f7ff ffab 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x1c); // 3rd Parameter
 8001c62:	201c      	movs	r0, #28
 8001c64:	f7ff ffa8 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x1e); // 4th Parameter
 8001c68:	201e      	movs	r0, #30
 8001c6a:	f7ff ffa5 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 5th Parameter
 8001c6e:	2020      	movs	r0, #32
 8001c70:	f7ff ffa2 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x12); // 6th Parameter
 8001c74:	2012      	movs	r0, #18
 8001c76:	f7ff ff9f 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 7th Parameter
 8001c7a:	202a      	movs	r0, #42	; 0x2a
 8001c7c:	f7ff ff9c 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x90); // 8th Parameter
 8001c80:	2090      	movs	r0, #144	; 0x90
 8001c82:	f7ff ff99 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x24); // 9th Parameter
 8001c86:	2024      	movs	r0, #36	; 0x24
 8001c88:	f7ff ff96 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x11); // 10th Parameter
 8001c8c:	2011      	movs	r0, #17
 8001c8e:	f7ff ff93 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 11th Parameter
 8001c92:	2000      	movs	r0, #0
 8001c94:	f7ff ff90 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 12th Parameter
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f7ff ff8d 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 13th Parameter
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f7ff ff8a 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 14th Parameter
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f7ff ff87 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 15th Parameter
 8001caa:	2000      	movs	r0, #0
 8001cac:	f7ff ff84 	bl	8001bb8 <lcdWriteParameter>

    lcdWriteCommand(NEGATIVE_GAMMA_CORRECT);
 8001cb0:	20e1      	movs	r0, #225	; 0xe1
 8001cb2:	f7ff ff6e 	bl	8001b92 <lcdWriteCommand>
    lcdWriteParameter(0x20); // 1st Parameter
 8001cb6:	2020      	movs	r0, #32
 8001cb8:	f7ff ff7e 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 2nd Parameter
 8001cbc:	2020      	movs	r0, #32
 8001cbe:	f7ff ff7b 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 3rd Parameter
 8001cc2:	2020      	movs	r0, #32
 8001cc4:	f7ff ff78 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 4th Parameter
 8001cc8:	2020      	movs	r0, #32
 8001cca:	f7ff ff75 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x05); // 5th Parameter
 8001cce:	2005      	movs	r0, #5
 8001cd0:	f7ff ff72 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 6th Parameter
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f7ff ff6f 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x15); // 7th Parameter
 8001cda:	2015      	movs	r0, #21
 8001cdc:	f7ff ff6c 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0xa7); // 8th Parameter
 8001ce0:	20a7      	movs	r0, #167	; 0xa7
 8001ce2:	f7ff ff69 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x3d); // 9th Parameter
 8001ce6:	203d      	movs	r0, #61	; 0x3d
 8001ce8:	f7ff ff66 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x18); // 10th Parameter
 8001cec:	2018      	movs	r0, #24
 8001cee:	f7ff ff63 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x25); // 11th Parameter
 8001cf2:	2025      	movs	r0, #37	; 0x25
 8001cf4:	f7ff ff60 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 12th Parameter
 8001cf8:	202a      	movs	r0, #42	; 0x2a
 8001cfa:	f7ff ff5d 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 13th Parameter
 8001cfe:	202b      	movs	r0, #43	; 0x2b
 8001d00:	f7ff ff5a 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 14th Parameter
 8001d04:	202b      	movs	r0, #43	; 0x2b
 8001d06:	f7ff ff57 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x3a); // 15th Parameter
 8001d0a:	203a      	movs	r0, #58	; 0x3a
 8001d0c:	f7ff ff54 	bl	8001bb8 <lcdWriteParameter>

    lcdWriteCommand(FRAME_RATE_CONTROL1);
 8001d10:	20b1      	movs	r0, #177	; 0xb1
 8001d12:	f7ff ff3e 	bl	8001b92 <lcdWriteCommand>
    lcdWriteParameter(0x08); // DIVA = 8
 8001d16:	2008      	movs	r0, #8
 8001d18:	f7ff ff4e 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x08); // VPA = 8
 8001d1c:	2008      	movs	r0, #8
 8001d1e:	f7ff ff4b 	bl	8001bb8 <lcdWriteParameter>

    lcdWriteCommand(DISPLAY_INVERSION);
 8001d22:	20b4      	movs	r0, #180	; 0xb4
 8001d24:	f7ff ff35 	bl	8001b92 <lcdWriteCommand>
    lcdWriteParameter(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 8001d28:	2007      	movs	r0, #7
 8001d2a:	f7ff ff45 	bl	8001bb8 <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL1);
 8001d2e:	20c0      	movs	r0, #192	; 0xc0
 8001d30:	f7ff ff2f 	bl	8001b92 <lcdWriteCommand>
    lcdWriteParameter(0x0a); // VRH = 10:  GVDD = 4.30
 8001d34:	200a      	movs	r0, #10
 8001d36:	f7ff ff3f 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x02); // VC = 2: VCI1 = 2.65
 8001d3a:	2002      	movs	r0, #2
 8001d3c:	f7ff ff3c 	bl	8001bb8 <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL2);
 8001d40:	20c1      	movs	r0, #193	; 0xc1
 8001d42:	f7ff ff26 	bl	8001b92 <lcdWriteCommand>
    lcdWriteParameter(0x02); // BT = 2: AVDD = 2xVCI1, VCL = -1xVCI1, VGH = 5xVCI1, VGL = -2xVCI1
 8001d46:	2002      	movs	r0, #2
 8001d48:	f7ff ff36 	bl	8001bb8 <lcdWriteParameter>

    lcdWriteCommand(VCOM_CONTROL1);
 8001d4c:	20c5      	movs	r0, #197	; 0xc5
 8001d4e:	f7ff ff20 	bl	8001b92 <lcdWriteCommand>
    lcdWriteParameter(0x50); // VMH = 80: VCOMH voltage = 4.5
 8001d52:	2050      	movs	r0, #80	; 0x50
 8001d54:	f7ff ff30 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x5b); // VML = 91: VCOML voltage = -0.225
 8001d58:	205b      	movs	r0, #91	; 0x5b
 8001d5a:	f7ff ff2d 	bl	8001bb8 <lcdWriteParameter>

    lcdWriteCommand(VCOM_OFFSET_CONTROL);
 8001d5e:	20c7      	movs	r0, #199	; 0xc7
 8001d60:	f7ff ff17 	bl	8001b92 <lcdWriteCommand>
    lcdWriteParameter(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
 8001d64:	2040      	movs	r0, #64	; 0x40
 8001d66:	f7ff ff27 	bl	8001bb8 <lcdWriteParameter>

    lcdWriteCommand(SET_COLUMN_ADDRESS);
 8001d6a:	202a      	movs	r0, #42	; 0x2a
 8001d6c:	f7ff ff11 	bl	8001b92 <lcdWriteCommand>
    lcdWriteParameter(0x00); // XSH
 8001d70:	2000      	movs	r0, #0
 8001d72:	f7ff ff21 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x00); // XSL
 8001d76:	2000      	movs	r0, #0
 8001d78:	f7ff ff1e 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x00); // XEH
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f7ff ff1b 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x7f); // XEL (128 pixels x)
 8001d82:	207f      	movs	r0, #127	; 0x7f
 8001d84:	f7ff ff18 	bl	8001bb8 <lcdWriteParameter>

    lcdWriteCommand(SET_PAGE_ADDRESS);
 8001d88:	202b      	movs	r0, #43	; 0x2b
 8001d8a:	f7ff ff02 	bl	8001b92 <lcdWriteCommand>
    lcdWriteParameter(0x00);
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f7ff ff12 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x00);
 8001d94:	2000      	movs	r0, #0
 8001d96:	f7ff ff0f 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x00);
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f7ff ff0c 	bl	8001bb8 <lcdWriteParameter>
    lcdWriteParameter(0x7f); // 128 pixels y
 8001da0:	207f      	movs	r0, #127	; 0x7f
 8001da2:	f7ff ff09 	bl	8001bb8 <lcdWriteParameter>

	// Select display orientation
    lcdWriteCommand(SET_ADDRESS_MODE);
 8001da6:	2036      	movs	r0, #54	; 0x36
 8001da8:	f7ff fef3 	bl	8001b92 <lcdWriteCommand>
	lcdWriteParameter(orientation);
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff ff02 	bl	8001bb8 <lcdWriteParameter>

	// Set the display to on
    lcdWriteCommand(SET_DISPLAY_ON);
 8001db4:	2029      	movs	r0, #41	; 0x29
 8001db6:	f7ff feec 	bl	8001b92 <lcdWriteCommand>
    lcdWriteCommand(WRITE_MEMORY_START);
 8001dba:	202c      	movs	r0, #44	; 0x2c
 8001dbc:	f7ff fee9 	bl	8001b92 <lcdWriteCommand>
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <lcdClearDisplay>:

// LCD graphics functions -----------------------------------------------------------------------------------

void lcdClearDisplay(uint16_t colour)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	80fb      	strh	r3, [r7, #6]
	uint16_t pixel;

	// Set the column address to 0-127
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 8001dd2:	202a      	movs	r0, #42	; 0x2a
 8001dd4:	f7ff fedd 	bl	8001b92 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f7ff feed 	bl	8001bb8 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001dde:	2000      	movs	r0, #0
 8001de0:	f7ff feea 	bl	8001bb8 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001de4:	2000      	movs	r0, #0
 8001de6:	f7ff fee7 	bl	8001bb8 <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 8001dea:	207f      	movs	r0, #127	; 0x7f
 8001dec:	f7ff fee4 	bl	8001bb8 <lcdWriteParameter>

	// Set the page address to 0-127
	lcdWriteCommand(SET_PAGE_ADDRESS);
 8001df0:	202b      	movs	r0, #43	; 0x2b
 8001df2:	f7ff fece 	bl	8001b92 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8001df6:	2000      	movs	r0, #0
 8001df8:	f7ff fede 	bl	8001bb8 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	f7ff fedb 	bl	8001bb8 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001e02:	2000      	movs	r0, #0
 8001e04:	f7ff fed8 	bl	8001bb8 <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 8001e08:	207f      	movs	r0, #127	; 0x7f
 8001e0a:	f7ff fed5 	bl	8001bb8 <lcdWriteParameter>

	// Plot the pixels
	lcdWriteCommand(WRITE_MEMORY_START);
 8001e0e:	202c      	movs	r0, #44	; 0x2c
 8001e10:	f7ff febf 	bl	8001b92 <lcdWriteCommand>
	for(pixel = 0; pixel < 16385; pixel++)
 8001e14:	2300      	movs	r3, #0
 8001e16:	81fb      	strh	r3, [r7, #14]
 8001e18:	e00c      	b.n	8001e34 <lcdClearDisplay+0x6c>
	{
		lcdWriteData(colour >> 8, colour);
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	88fa      	ldrh	r2, [r7, #6]
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fed8 	bl	8001bde <lcdWriteData>
	for(pixel = 0; pixel < 16385; pixel++)
 8001e2e:	89fb      	ldrh	r3, [r7, #14]
 8001e30:	3301      	adds	r3, #1
 8001e32:	81fb      	strh	r3, [r7, #14]
 8001e34:	89fb      	ldrh	r3, [r7, #14]
 8001e36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e3a:	d9ee      	bls.n	8001e1a <lcdClearDisplay+0x52>
	}
}
 8001e3c:	bf00      	nop
 8001e3e:	bf00      	nop
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <lcdFilledRectangle>:

// Draw a filled rectangle
// Note:	y1 must be greater than y0  and x1 must be greater than x0
//			for this to work
void lcdFilledRectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 8001e46:	b590      	push	{r4, r7, lr}
 8001e48:	b085      	sub	sp, #20
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4604      	mov	r4, r0
 8001e4e:	4608      	mov	r0, r1
 8001e50:	4611      	mov	r1, r2
 8001e52:	461a      	mov	r2, r3
 8001e54:	4623      	mov	r3, r4
 8001e56:	80fb      	strh	r3, [r7, #6]
 8001e58:	4603      	mov	r3, r0
 8001e5a:	80bb      	strh	r3, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	807b      	strh	r3, [r7, #2]
 8001e60:	4613      	mov	r3, r2
 8001e62:	803b      	strh	r3, [r7, #0]

	// To speed up plotting we define a x window with the width of the
	// rectangle and then just output the required number of bytes to
	// fill down to the end point

	lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 8001e64:	202a      	movs	r0, #42	; 0x2a
 8001e66:	f7ff fe94 	bl	8001b92 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f7ff fea4 	bl	8001bb8 <lcdWriteParameter>
	lcdWriteParameter(x0);
 8001e70:	88fb      	ldrh	r3, [r7, #6]
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fe9f 	bl	8001bb8 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f7ff fe9c 	bl	8001bb8 <lcdWriteParameter>
	lcdWriteParameter(x1);
 8001e80:	887b      	ldrh	r3, [r7, #2]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fe97 	bl	8001bb8 <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 8001e8a:	202b      	movs	r0, #43	; 0x2b
 8001e8c:	f7ff fe81 	bl	8001b92 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8001e90:	2000      	movs	r0, #0
 8001e92:	f7ff fe91 	bl	8001bb8 <lcdWriteParameter>
	lcdWriteParameter(y0);
 8001e96:	88bb      	ldrh	r3, [r7, #4]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff fe8c 	bl	8001bb8 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f7ff fe89 	bl	8001bb8 <lcdWriteParameter>
	lcdWriteParameter(y1);
 8001ea6:	883b      	ldrh	r3, [r7, #0]
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fe84 	bl	8001bb8 <lcdWriteParameter>

	lcdWriteCommand(WRITE_MEMORY_START);
 8001eb0:	202c      	movs	r0, #44	; 0x2c
 8001eb2:	f7ff fe6e 	bl	8001b92 <lcdWriteCommand>

	for (pixels = 0; pixels < ((x1 - x0) * (y1 - y0)); pixels++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	81fb      	strh	r3, [r7, #14]
 8001eba:	e00c      	b.n	8001ed6 <lcdFilledRectangle+0x90>
		lcdWriteData(colour >> 8, colour);;
 8001ebc:	8c3b      	ldrh	r3, [r7, #32]
 8001ebe:	0a1b      	lsrs	r3, r3, #8
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	8c3a      	ldrh	r2, [r7, #32]
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	4611      	mov	r1, r2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fe87 	bl	8001bde <lcdWriteData>
	for (pixels = 0; pixels < ((x1 - x0) * (y1 - y0)); pixels++)
 8001ed0:	89fb      	ldrh	r3, [r7, #14]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	81fb      	strh	r3, [r7, #14]
 8001ed6:	89fa      	ldrh	r2, [r7, #14]
 8001ed8:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001edc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ee0:	1acb      	subs	r3, r1, r3
 8001ee2:	f9b7 0000 	ldrsh.w	r0, [r7]
 8001ee6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001eea:	1a41      	subs	r1, r0, r1
 8001eec:	fb01 f303 	mul.w	r3, r1, r3
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	dbe3      	blt.n	8001ebc <lcdFilledRectangle+0x76>
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd90      	pop	{r4, r7, pc}
	...

08001f00 <lcdPutCh>:

// LCD text manipulation functions --------------------------------------------------------------------------
#define pgm_read_byte_near(address_short) (uint16_t)(address_short)
// Plot a character at the specified x, y co-ordinates (top left hand corner of character)
void lcdPutCh(unsigned char character, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4604      	mov	r4, r0
 8001f08:	4608      	mov	r0, r1
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4623      	mov	r3, r4
 8001f10:	71fb      	strb	r3, [r7, #7]
 8001f12:	4603      	mov	r3, r0
 8001f14:	71bb      	strb	r3, [r7, #6]
 8001f16:	460b      	mov	r3, r1
 8001f18:	717b      	strb	r3, [r7, #5]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	807b      	strh	r3, [r7, #2]

	// To speed up plotting we define a x window of 6 pixels and then
	// write out one row at a time.  This means the LCD will correctly
	// update the memory pointer saving us a good few bytes

	lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 8001f1e:	202a      	movs	r0, #42	; 0x2a
 8001f20:	f7ff fe37 	bl	8001b92 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8001f24:	2000      	movs	r0, #0
 8001f26:	f7ff fe47 	bl	8001bb8 <lcdWriteParameter>
	lcdWriteParameter(x);
 8001f2a:	79bb      	ldrb	r3, [r7, #6]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fe43 	bl	8001bb8 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001f32:	2000      	movs	r0, #0
 8001f34:	f7ff fe40 	bl	8001bb8 <lcdWriteParameter>
	lcdWriteParameter(x+5);
 8001f38:	79bb      	ldrb	r3, [r7, #6]
 8001f3a:	3305      	adds	r3, #5
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fe3a 	bl	8001bb8 <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 8001f44:	202b      	movs	r0, #43	; 0x2b
 8001f46:	f7ff fe24 	bl	8001b92 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f7ff fe34 	bl	8001bb8 <lcdWriteParameter>
	lcdWriteParameter(y);
 8001f50:	797b      	ldrb	r3, [r7, #5]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fe30 	bl	8001bb8 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f7ff fe2d 	bl	8001bb8 <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 8001f5e:	207f      	movs	r0, #127	; 0x7f
 8001f60:	f7ff fe2a 	bl	8001bb8 <lcdWriteParameter>

	lcdWriteCommand(WRITE_MEMORY_START);
 8001f64:	202c      	movs	r0, #44	; 0x2c
 8001f66:	f7ff fe14 	bl	8001b92 <lcdWriteCommand>

	// Plot the font data
	for (row = 0; row < 8; row++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	73fb      	strb	r3, [r7, #15]
 8001f6e:	e032      	b.n	8001fd6 <lcdPutCh+0xd6>
	{
		for (column = 0; column < 6; column++)
 8001f70:	2300      	movs	r3, #0
 8001f72:	73bb      	strb	r3, [r7, #14]
 8001f74:	e029      	b.n	8001fca <lcdPutCh+0xca>
		{
			//if ((font5x8[character][column]) & (1 << row))
			if ((fontus[character][column]) & (1 << row))
 8001f76:	79fa      	ldrb	r2, [r7, #7]
 8001f78:	7bb9      	ldrb	r1, [r7, #14]
 8001f7a:	481b      	ldr	r0, [pc, #108]	; (8001fe8 <lcdPutCh+0xe8>)
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4413      	add	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4403      	add	r3, r0
 8001f86:	440b      	add	r3, r1
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	fa42 f303 	asr.w	r3, r2, r3
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00a      	beq.n	8001fb0 <lcdPutCh+0xb0>
				lcdWriteData(fgColour>>8, fgColour);
 8001f9a:	887b      	ldrh	r3, [r7, #2]
 8001f9c:	0a1b      	lsrs	r3, r3, #8
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	887a      	ldrh	r2, [r7, #2]
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fe18 	bl	8001bde <lcdWriteData>
 8001fae:	e009      	b.n	8001fc4 <lcdPutCh+0xc4>
			else lcdWriteData(bgColour >> 8, bgColour);
 8001fb0:	8c3b      	ldrh	r3, [r7, #32]
 8001fb2:	0a1b      	lsrs	r3, r3, #8
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	8c3a      	ldrh	r2, [r7, #32]
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fe0d 	bl	8001bde <lcdWriteData>
		for (column = 0; column < 6; column++)
 8001fc4:	7bbb      	ldrb	r3, [r7, #14]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	73bb      	strb	r3, [r7, #14]
 8001fca:	7bbb      	ldrb	r3, [r7, #14]
 8001fcc:	2b05      	cmp	r3, #5
 8001fce:	d9d2      	bls.n	8001f76 <lcdPutCh+0x76>
	for (row = 0; row < 8; row++)
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	73fb      	strb	r3, [r7, #15]
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	2b07      	cmp	r3, #7
 8001fda:	d9c9      	bls.n	8001f70 <lcdPutCh+0x70>
		}
	}
}
 8001fdc:	bf00      	nop
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd90      	pop	{r4, r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	08002174 	.word	0x08002174

08001fec <decodeRgbValue>:

// Translates a 3 byte RGB value into a 2 byte value for the LCD (values should be 0-31)
uint16_t decodeRgbValue(uint8_t r, uint8_t g, uint8_t b)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	71bb      	strb	r3, [r7, #6]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	717b      	strb	r3, [r7, #5]
	return (b << 11) | (g << 6) | (r);
 8001ffe:	797b      	ldrb	r3, [r7, #5]
 8002000:	02db      	lsls	r3, r3, #11
 8002002:	b21a      	sxth	r2, r3
 8002004:	79bb      	ldrb	r3, [r7, #6]
 8002006:	019b      	lsls	r3, r3, #6
 8002008:	b21b      	sxth	r3, r3
 800200a:	4313      	orrs	r3, r2
 800200c:	b21a      	sxth	r2, r3
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	b21b      	sxth	r3, r3
 8002012:	4313      	orrs	r3, r2
 8002014:	b21b      	sxth	r3, r3
 8002016:	b29b      	uxth	r3, r3
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <lcdTextX>:

// This routine takes a row number from 0 to 20 and
// returns the x coordinate on the screen (0-127) to make
// it easy to place text
uint8_t lcdTextX(uint8_t x) { return x*6; }
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	461a      	mov	r2, r3
 8002032:	0052      	lsls	r2, r2, #1
 8002034:	4413      	add	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	b2db      	uxtb	r3, r3
 800203a:	4618      	mov	r0, r3
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <lcdTextY>:

// This routine takes a column number from 0 to 20 and
// returns the y coordinate on the screen (0-127) to make
// it easy to place text
uint8_t lcdTextY(uint8_t y) { return y*8; }
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	4603      	mov	r3, r0
 800204e:	71fb      	strb	r3, [r7, #7]
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	b2db      	uxtb	r3, r3
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <lcdPutS>:

// Plot a string of characters to the LCD
void lcdPutS(const char *string, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
 8002062:	b590      	push	{r4, r7, lr}
 8002064:	b087      	sub	sp, #28
 8002066:	af02      	add	r7, sp, #8
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	4608      	mov	r0, r1
 800206c:	4611      	mov	r1, r2
 800206e:	461a      	mov	r2, r3
 8002070:	4603      	mov	r3, r0
 8002072:	70fb      	strb	r3, [r7, #3]
 8002074:	460b      	mov	r3, r1
 8002076:	70bb      	strb	r3, [r7, #2]
 8002078:	4613      	mov	r3, r2
 800207a:	803b      	strh	r3, [r7, #0]
	uint8_t origin = x;
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	73bb      	strb	r3, [r7, #14]
	uint8_t characterNumber;

	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 8002080:	2300      	movs	r3, #0
 8002082:	73fb      	strb	r3, [r7, #15]
 8002084:	e01c      	b.n	80020c0 <lcdPutS+0x5e>
	{
		// Check if we are out of bounds and move to
		// the next line if we are
		if (x > 121)
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	2b79      	cmp	r3, #121	; 0x79
 800208a:	d904      	bls.n	8002096 <lcdPutS+0x34>
		{
			x = origin;
 800208c:	7bbb      	ldrb	r3, [r7, #14]
 800208e:	70fb      	strb	r3, [r7, #3]
			y += 8;
 8002090:	78bb      	ldrb	r3, [r7, #2]
 8002092:	3308      	adds	r3, #8
 8002094:	70bb      	strb	r3, [r7, #2]
		}

		// If we move past the bottom of the screen just exit
		if (y > 120) break;
 8002096:	78bb      	ldrb	r3, [r7, #2]
 8002098:	2b78      	cmp	r3, #120	; 0x78
 800209a:	d819      	bhi.n	80020d0 <lcdPutS+0x6e>

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	7818      	ldrb	r0, [r3, #0]
 80020a4:	883c      	ldrh	r4, [r7, #0]
 80020a6:	78ba      	ldrb	r2, [r7, #2]
 80020a8:	78f9      	ldrb	r1, [r7, #3]
 80020aa:	8c3b      	ldrh	r3, [r7, #32]
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	4623      	mov	r3, r4
 80020b0:	f7ff ff26 	bl	8001f00 <lcdPutCh>
		x += 6;
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	3306      	adds	r3, #6
 80020b8:	70fb      	strb	r3, [r7, #3]
	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	3301      	adds	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
 80020c0:	7bfc      	ldrb	r4, [r7, #15]
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7fe f880 	bl	80001c8 <strlen>
 80020c8:	4603      	mov	r3, r0
 80020ca:	429c      	cmp	r4, r3
 80020cc:	d3db      	bcc.n	8002086 <lcdPutS+0x24>
	}
}
 80020ce:	e000      	b.n	80020d2 <lcdPutS+0x70>
		if (y > 120) break;
 80020d0:	bf00      	nop
}
 80020d2:	bf00      	nop
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd90      	pop	{r4, r7, pc}
	...

080020dc <__libc_init_array>:
 80020dc:	b570      	push	{r4, r5, r6, lr}
 80020de:	4d0d      	ldr	r5, [pc, #52]	; (8002114 <__libc_init_array+0x38>)
 80020e0:	4c0d      	ldr	r4, [pc, #52]	; (8002118 <__libc_init_array+0x3c>)
 80020e2:	1b64      	subs	r4, r4, r5
 80020e4:	10a4      	asrs	r4, r4, #2
 80020e6:	2600      	movs	r6, #0
 80020e8:	42a6      	cmp	r6, r4
 80020ea:	d109      	bne.n	8002100 <__libc_init_array+0x24>
 80020ec:	4d0b      	ldr	r5, [pc, #44]	; (800211c <__libc_init_array+0x40>)
 80020ee:	4c0c      	ldr	r4, [pc, #48]	; (8002120 <__libc_init_array+0x44>)
 80020f0:	f000 f820 	bl	8002134 <_init>
 80020f4:	1b64      	subs	r4, r4, r5
 80020f6:	10a4      	asrs	r4, r4, #2
 80020f8:	2600      	movs	r6, #0
 80020fa:	42a6      	cmp	r6, r4
 80020fc:	d105      	bne.n	800210a <__libc_init_array+0x2e>
 80020fe:	bd70      	pop	{r4, r5, r6, pc}
 8002100:	f855 3b04 	ldr.w	r3, [r5], #4
 8002104:	4798      	blx	r3
 8002106:	3601      	adds	r6, #1
 8002108:	e7ee      	b.n	80020e8 <__libc_init_array+0xc>
 800210a:	f855 3b04 	ldr.w	r3, [r5], #4
 800210e:	4798      	blx	r3
 8002110:	3601      	adds	r6, #1
 8002112:	e7f2      	b.n	80020fa <__libc_init_array+0x1e>
 8002114:	08002474 	.word	0x08002474
 8002118:	08002474 	.word	0x08002474
 800211c:	08002474 	.word	0x08002474
 8002120:	08002478 	.word	0x08002478

08002124 <memset>:
 8002124:	4402      	add	r2, r0
 8002126:	4603      	mov	r3, r0
 8002128:	4293      	cmp	r3, r2
 800212a:	d100      	bne.n	800212e <memset+0xa>
 800212c:	4770      	bx	lr
 800212e:	f803 1b01 	strb.w	r1, [r3], #1
 8002132:	e7f9      	b.n	8002128 <memset+0x4>

08002134 <_init>:
 8002134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002136:	bf00      	nop
 8002138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800213a:	bc08      	pop	{r3}
 800213c:	469e      	mov	lr, r3
 800213e:	4770      	bx	lr

08002140 <_fini>:
 8002140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002142:	bf00      	nop
 8002144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002146:	bc08      	pop	{r3}
 8002148:	469e      	mov	lr, r3
 800214a:	4770      	bx	lr
